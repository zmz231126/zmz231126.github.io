<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vim编辑命令2</title>
    <url>/2024/04/11/Vim%20basic%20intro/</url>
    <content><![CDATA[<h1 id="command-mode"><a class="markdownIt-Anchor" href="#command-mode"></a> Command Mode:</h1>
<p>This is the the default mode in which vim starts. We can use a variety of command in this mode like copy, paste, delete, replace and many more.</p>
<h1 id="insert-mode"><a class="markdownIt-Anchor" href="#insert-mode"></a> Insert Mode:</h1>
<p>You can use this mode to enter/edit text.</p>
<h1 id="command-line-mode"><a class="markdownIt-Anchor" href="#command-line-mode"></a> Command Line Mode:</h1>
<p>Command line mode is used to enter command. The commands start with a colon.</p>
<h1 id="visual-mode"><a class="markdownIt-Anchor" href="#visual-mode"></a> Visual Mode:</h1>
<p>In this mode you can visually select text and run commands on selected section.</p>
<h1 id="create-and-open-files"><a class="markdownIt-Anchor" href="#create-and-open-files"></a> Create and Open Files:</h1>
<p>Open terminal and run vim, after that, run command `:edit <filename>.<extention>.</p>
<h1 id="editing"><a class="markdownIt-Anchor" href="#editing"></a> Editing:</h1>
<p>insert text is writing text before cursor, deletion is deleting after the cursor. there are some shortcuts for insert text.</p>
<ol>
<li>insert before cursor <code>i</code></li>
<li>insert at the begining of the line <code>I</code></li>
<li>insert at the end of the line <code>A</code></li>
<li>insert next by one position of the cursor <code>a</code></li>
<li>open a new line below the current line <code>o</code></li>
<li>open a new line above the current line <code>O</code>(capital letter o)</li>
<li>delete the next letter and switch to insert mode<br />
<code>s</code></li>
<li>delete the current line and switch to insert mode<code>S</code> or <code>cc</code>.</li>
<li>if you want to change text from the current cursor position <code>C</code></li>
<li>replace the next letter without switch to insert mode <code>r</code></li>
<li>replace the entire line <code>R</code></li>
<li>move cursor to the begining of the current line in command mode <code>0</code></li>
<li>move cursor to the end of the current line in command mode <code>$</code></li>
<li><code>ctrl +f</code> scroll down entire page.</li>
<li><code>ctrl + b</code> scroll up entrie page</li>
<li><code>w</code> move cursor to the begining of next word.</li>
<li><code>b</code> move cursor to the begining of last word.</li>
<li><code>e</code> move cursor to the end of the current world.</li>
<li><code>:n</code>jump to the nth line.</li>
<li><code>:0</code>jump the start of file.</li>
<li><code>:$</code>jump to the start of the last sentence.<br />
Vim keeps track of your navigation using a jump list. You can go backward by <code>ctrl+o</code>, go forward by <code>ctrl + i</code>.<br />
Buffer: when we open a file, Vim load its contents from disk drive. When we edit a file, we are actually editing the file from buffer. When we finished editing and save file, that time only buffer contents are transferred to appropriate file.<br />
<code>y</code> copy single character from cursor position.<br />
<code>p</code> past character after cursor position.<br />
<code>P</code> past character before cursor positon.<br />
<code>x</code> delete character from cursor positon.<br />
<code>X</code> delete previous character from cursor position.<br />
<code>dw</code> delete word from cursor position<br />
<code>D</code> delete entire line from cursor positon.<br />
<code>dd</code> delete entire line<br />
<code>Y</code>`yy<code>copy entire line To perform multi-line/multi-word actions just use numbers with command. to perform one time undo action excute</code>u<code>to perform multiple undo action, use number withsame command. to undo all execute</code>U<code>to redo</code>ctr+r<code>incremental search: when the user types text, one or more possible matches for the text are found and immediately presented to the user. to perform incremental search</code>:set insearch<code>you can execute the following setting in command mode to custom you search settings:</code>:set hlsearch<code>and</code>:set incsearch<code>or undo execute</code>:set nohlsearch<code>or</code>:set noincsearch<code>add</code>\c<code>or</code>\C<code>to set case sensitive.</code>&lt;<code>search the words which include the letters at the begining of the word</code>&gt; search the words which include the letters at the end.</li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
        <category>Vim</category>
        <category>Vim快捷键6</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>流程控制</title>
    <url>/2024/04/01/if%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<p>Python代码是按照自上而下执行的. 但是通过流程控制语句可以改变流程控制顺序, 也可以让程序反复执行多次.<br />
分为两大类:</p>
<h1 id="条件判断语句"><a class="markdownIt-Anchor" href="#条件判断语句"></a> 条件判断语句</h1>
<p>语法: if 条件表达式: 语句<br />
执行流程:<br />
1. 首先对条件表达式进行求值判断.<br />
2. True执行语句<br />
3. False不执行语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> num ==<span class="number">10</span>: <span class="built_in">print</span>(<span class="string">&quot;我会出来吗&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>执行后返回<code>我会出来吗</code></p>
<p>默认情况下, if只会控制紧随其后的语句, 如果需要控制多条语句,需要使用代码块.</p>
<h1 id="代码块python是缩进严格的语言"><a class="markdownIt-Anchor" href="#代码块python是缩进严格的语言"></a> 代码块(python是缩进严格的语言)</h1>
<p>可以让if控制多条语句. 语句在<code>:</code>下一行开始写. 下边等缩进的内容就是代码块. 这也是一般使用if语句的方式.<br />
可以用Tab缩紧, 或者4个空格缩紧. 推荐使用空格缩紧, 而且整片代码使用方式要统一.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">num = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> num == <span class="number">10</span>: </span><br><span class="line">    <span class="built_in">print</span>(<span class="number">123</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">234</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">345</span>)</span><br></pre></td></tr></table></figure>
<p>这里会全部返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123</span><br><span class="line">234</span><br><span class="line">345</span><br></pre></td></tr></table></figure>
<h1 id="input函数"><a class="markdownIt-Anchor" href="#input函数"></a> input()函数</h1>
<p>调用input()后, 等待用户输入, 输入结束后, 继续执行.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;用户输入了<span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>在命令行中输入’你好’,回车返回<code>用户输入了你好</code></p>
<div class="tip warning"><p>不论用户输入的是什么数据, 返回值都是字符串. 如果要使用返回值, 需要对返回值进行类型转换.</p>
</div>
<p>input()函数可以输入一个字符串作为参数, 作为输入内容的提示文字.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">username = <span class="built_in">input</span>(<span class="string">&quot;请输入一个用户名&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> username == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;欢迎管理员光临&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">欢迎管理员光临</span><br></pre></td></tr></table></figure>
<p>input()可以暂时阻止程序结束</p>
<h1 id="if-else语句"><a class="markdownIt-Anchor" href="#if-else语句"></a> if else语句</h1>
<p>单纯的if语句, 如果条件判断语句为True, 则执行代码块, 但是如果是False, 则返回空值. if else语句则提供了另一个选择.<br />
语法:<br />
if 条件表达式:<br />
代码块<br />
else 条件表达式:<br />
代码块<br />
执行流程：<br />
先对条件表达式进行求职, 若为True, 执行if代码块; 若为False执行else代码块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="built_in">input</span>(<span class="string">&quot;请输入你的年龄&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">int</span>(age) &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;您一经成年了&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你还未成年&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>返回值为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请输入你的年龄17</span><br><span class="line">你还未成年</span><br></pre></td></tr></table></figure>
<h1 id="if-elif-else"><a class="markdownIt-Anchor" href="#if-elif-else"></a> if-elif-else</h1>
<p>语法:<br />
if 条件表达式:<br />
代码块<br />
elif 条件表达式:<br />
代码块<br />
elif 条件表达式:<br />
代码块<br />
elif 条件表达式:<br />
代码块<br />
else:<br />
代码块<br />
执行流程:</p>
<ul>
<li>自上而上依次执行, 当发现表达式为True时, 执行相应的代码块, 并停止程序执行.</li>
<li>如果都为False, 执行else代码块.</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python交互模式</title>
    <url>/2024/03/31/python%E4%BA%A4%E4%BA%92%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>交互界面：当我们通过命令行进入python，所进入的界面就是python的交互界面。</p>
<p>交互模式是输入一行执行一行，并不适合日常开发，仅可以做一些日常简单的测试。</p>
<p>我们可以编写<code>.py</code>文档，利用【终端】执行。</p>
<p>mac终端运行python文件。</p>
<ol>
<li>
<p>比如在桌面新建了<code>.py</code>文档。</p>
</li>
<li>
<p>打开终端，输入<code>cd ~/desktop</code>回车。</p>
</li>
<li>
<p>输入<code>python3 filename.py</code>回车。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Mac终端</tag>
      </tags>
  </entry>
  <entry>
    <title>python中的几个术语</title>
    <url>/2024/03/31/python%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<p>【表达式】类似于数学公式比如10 + 5；8 + 4.</p>
<p>表达式仅仅用来计算一些结果，不会对程序产生实质影响。</p>
<p>【语句】语句需要完成某种功能，比如打印信息、获取信息、为变量赋值等比如：<code>print()</code>, <code>a = 10</code>。</p>
<p>语句的执行会对程序执行产生影响。语句在命令行中不一定会有执行结果。有返回值的语句，会有返回结果。</p>
<p>【程序】是多个语句和表达式构成的。</p>
<p>【函数（function）】函数是一个语句，用来完成特定的功能。函数的结构为<code>***()</code>.括号中的内容叫「参数」，可以没有参数也可以有多个参数，中间用逗号隔开。返回的结果叫做「返回值」，同样可以没有返回值。</p>
<p>函数分为</p>
<ol>
<li>内置函数。python解释器提供的，可以在python中直接使用。</li>
<li>自定义函数。由程序员自定义的函数。</li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python的基本语法</title>
    <url>/2024/03/31/python%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>python严格区分大小写。比如<code>Print()</code>不能被执行。</p>
<p><strong>语句</strong>不建议过长。一条语句可以多行编写，语句以反斜线<code>\</code>换行。</p>
<p>不要随便写缩进，缩进严格，表示代码块。</p>
<p><code>%</code>后加空格表示注释。</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>range()函数</title>
    <url>/2024/04/06/range()%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<p>range()函数是一个可以生成一个自然数的序列<br />
<code>r = range(5)</code> 生成的序列为[0,1,2,3,4]<br />
该函数可以生成三个参数:</p>
<ol>
<li>起始位置<br />
可以省略, 默认为0</li>
<li>结束位置</li>
<li>步长<br />
可以省略步长, 默认为1. 比如</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(r))</span><br></pre></td></tr></table></figure>
<p>output为<code>[0, 2, 4, 6, 8]</code><br />
步长还可以是负数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r = <span class="built_in">range</span>(<span class="number">10</span>,<span class="number">0</span>,-<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(r))</span><br></pre></td></tr></table></figure>
<p>output<code>[10, 8, 6, 4, 2]</code><br />
通过rang()可以创建一个指定次数的for循环</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>
<p>生成一组0到29的数.<br />
for循环出了创建方式外, 其余跟while是一样的用法.</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim中的搜索和替换</title>
    <url>/2024/04/11/substitution%20in%20vim/</url>
    <content><![CDATA[<h1 id="ranges"><a class="markdownIt-Anchor" href="#ranges"></a> Ranges</h1>
<p>For most Vim commands, the default range is the current line. However we can control ranges, and in that way execute commands over the custom range of liness or characters in the current buffer.<br />
<code>:s/bad/good/g</code> change all words <code>bad</code> to <code>good</code> in the current line.<br />
<code>:6,11s/bad/good/g</code> make the same change, but in lines 6 to 11, including 1 and 11<br />
<code>:%s/bag/good/g</code> make the same change in the entire file.</p>
<p>28 line 28<br />
1 line 1<br />
$ last line<br />
% all line in a file (same as 1,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">)</mo><mn>6</mn><mo separator="true">,</mo><mn>28</mn><mi>l</mi><mi>i</mi><mi>n</mi><mi>e</mi><mn>6</mn><mi>t</mi><mi>o</mi><mn>28</mn><mi>i</mi><mi>n</mi><mi>c</mi><mi>l</mi><mi>u</mi><mi>s</mi><mi>i</mi><mi>v</mi><mi>e</mi><mn>11</mn><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">)  
6,28 line 6 to 28 inclusive  
11,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mclose">)</span><span class="mord">6</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mord">8</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">e</span><span class="mord">6</span><span class="mord mathnormal">t</span><span class="mord mathnormal">o</span><span class="mord">2</span><span class="mord">8</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal">c</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">u</span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">v</span><span class="mord mathnormal">e</span><span class="mord">1</span><span class="mord">1</span><span class="mpunct">,</span></span></span></span> line 11 to end of the file<br />
.,$ current line to end of the file<br />
.+4 current line current+5 line, inclusive<br />
?a?,/b between pattern a and b, inclusive</p>
<p>Each search and replace can follow a flag, like <code>g</code> --&gt; to replace all occurrences in the range; <code>c</code> --&gt; to confirm each substitution; <code>i</code> --&gt; ignore case; <code>I</code> --&gt; mind case. If flag were not used, only the first occurrence in the range would be replaced.</p>
<p>You can also in select the content first in Visual mode, then start typing the rest of substitution command.</p>
<p>This sentence is short</p>
<p>Above method search the strings instead of the whole word, if we want to replace only the whole word, use <code>\&lt;and\&gt;</code> to specify that only whole word should be matched.  <code>:s/\&lt;is\&gt;/was/g</code></p>
<p>If you want to replace two different words with one new word, do this:<br />
:make<br />
<code>:s/\(pretty\|good\)/awesome/gi</code> the new character <code>|</code> in this command is logical <strong>or</strong>.</p>
<p><code>c</code> flag, you can interactive with each search and replace in Vim.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">:%s/bad/good/gc</span><br></pre></td></tr></table></figure>
<p><code>y</code> or <code>n</code> makes you confirm one by one; <code>a</code> replace all remaining word; <code>q</code> simply quit the replacement process. <code>l</code> replace only the current word and terminate the replacement process.<br />
<code>^E</code> = <code>ctrl-e</code> scroll up the screen; <code>^Y</code> = <code>ctrl-y</code> scroll down the screen.</p>
<p><code>:vimgrep warning *.md</code> search ‘warning’ in all markdown files in the current directory.</p>
<table>
<thead>
<tr>
<th>cmd</th>
<th>function</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>:cN</code></td>
<td>jump to the next match</td>
</tr>
<tr>
<td><code>:cN</code></td>
<td>jump to the previous match</td>
</tr>
<tr>
<td><code>:clist</code></td>
<td>view all files that containe the matched string</td>
</tr>
<tr>
<td><code>:cc &lt;number&gt;</code></td>
<td>jump to the specific numbered file, which you get from <code>:clist</code> output</td>
</tr>
<tr>
<td><code>:match ErrorMsg /&lt;pattern&gt;/</code> to highlight all matches of a string in your current buffer. In this way, you can change the color of the highlights, let’s see what we have here.</td>
<td></td>
</tr>
<tr>
<td><code>:match</code> the command</td>
<td></td>
</tr>
<tr>
<td>here we also have</td>
<td></td>
</tr>
<tr>
<td><code>ErrorMsg</code> --&gt;red color</td>
<td></td>
</tr>
<tr>
<td><code>WarningMsg</code> --&gt; pink color</td>
<td></td>
</tr>
<tr>
<td><code>ModeMsg</code> --&gt; bold font</td>
<td></td>
</tr>
<tr>
<td><code>MoreMsg</code> --&gt; green color</td>
<td></td>
</tr>
</tbody>
</table>
<h1 id="the-global-command"><a class="markdownIt-Anchor" href="#the-global-command"></a> the global command</h1>
<p><code>:g/error/d</code>  this will delete all lines in the current buffer which contain the pattern ‘error’</p>
<table>
<thead>
<tr>
<th>character</th>
<th>explanation</th>
</tr>
</thead>
<tbody>
<tr>
<td>g</td>
<td>the command itself</td>
</tr>
<tr>
<td>error</td>
<td>the pattern we want to search</td>
</tr>
<tr>
<td>d</td>
<td>the Ex command delete(:d)</td>
</tr>
<tr>
<td>If we want to all line not containing the string ‘error’, we can run command this <code>:g!/error/d</code></td>
<td></td>
</tr>
<tr>
<td>If we want to delete all blank lines: <code>:g/^\s*$/d</code>, let’s break down this command</td>
<td></td>
</tr>
<tr>
<td><code>g</code> --&gt; the global command</td>
<td></td>
</tr>
<tr>
<td><code>^</code>  --&gt; the start of line</td>
<td></td>
</tr>
<tr>
<td><code>\s*</code> --&gt; zero or more space characters</td>
<td></td>
</tr>
<tr>
<td><code>$</code> --&gt; the end of line</td>
<td></td>
</tr>
<tr>
<td><code>d</code> --&gt; the Ex command delete</td>
<td></td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>编程</category>
        <category>Vim</category>
        <category>Vim快捷键5</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>vim编辑命令1</title>
    <url>/2024/04/11/vim%20%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<h1 id="verbs"><a class="markdownIt-Anchor" href="#verbs"></a> Verbs</h1>
<ol>
<li>Powerless verbs</li>
</ol>
<ul>
<li><code>x</code> delete character under the cursor to the right</li>
<li><code>X</code> delete character under the cursor to the left</li>
<li><code>r</code> replace character under the cursor with another character</li>
<li><code>s</code> delete character under the cursor and enter the Insert mode</li>
</ul>
<ol start="2">
<li>Powerful verbs</li>
</ol>
<ul>
<li><code>y</code> copy</li>
<li><code>c</code> change</li>
<li><code>d</code> delete</li>
<li><code>v</code> visually select<br />
<em>Note: these commands are usually known as operators commands or operators.</em></li>
</ul>
<h1 id="modifiers"><a class="markdownIt-Anchor" href="#modifiers"></a> Modifiers</h1>
<p><code>i</code> inner<br />
<code>a</code> around<br />
<code>t</code> searches for something within the current line, it only searches forwards, and locate cursor before the character you want to search.<br />
<code>f</code> same as <code>t</code> but locate cursor right on the character you want to search, this two modifiers will be very useful for locating cursor within current line.</p>
<h1 id="nouns"><a class="markdownIt-Anchor" href="#nouns"></a> Nouns</h1>
<ul>
<li><code>w,W</code> start of next world or WORD</li>
<li><code>b,B</code> start of previous word or WORD</li>
<li><code>e,E</code> end of next word or WORD</li>
<li><code>$</code> end of line</li>
<li><code>0</code> start of line</li>
<li><code>s</code> sentence</li>
<li><code>p</code> paragraph</li>
<li><code>t</code> tag(in context of HTML)</li>
<li><code>b</code> block(in context of programming)</li>
<li><code>aw</code> a(complete) word</li>
<li><code>as</code> a (complete) sentence</li>
<li><code>ap</code> a (complete) paragraph</li>
<li><code>iw</code> inner word</li>
<li><code>is</code> inner sentence</li>
<li><code>ip</code> inner paragraph</li>
<li><code>dw</code> delete word from cursor position to the end of the word</li>
<li><code>cis</code> change inside sentence</li>
<li><code>ci&quot;</code> change insdie quote</li>
<li><code>c/hello</code> change search hello, change until next occurrence of hello</li>
<li><code> ctY</code> change until Y</li>
<li><code>vap</code> visually around paragraph</li>
<li><code>dj</code> delete down a line (current and below)</li>
<li><code>dt)</code> delete up until next closing parenthesis</li>
<li><code>.</code> the dot command will repeat the commands which change the contents of the buffer. If you want repeat a combination of movements and changes, you can record macro.</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>Vim</category>
        <category>Vim快捷键4</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim mapping</title>
    <url>/2024/04/12/vim_mapping/</url>
    <content><![CDATA[<h1 id="nmap"><a class="markdownIt-Anchor" href="#nmap"></a> nmap</h1>
<p><code>nmap</code> command is used to define mapping for Normal mode only. This grammar should be same as this:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">:namp v :<span class="keyword">version</span><span class="symbol">&lt;cr&gt;</span>   </span><br></pre></td></tr></table></figure>
<p><code>n</code> stands for Normal mode; <code>v</code> is the new shortcut we want to set; <code>:version</code> is the default command we want to replace; <code>&lt;cr&gt;</code> is the Enter Key we need to press after the default.</p>
<p><code>nunmap</code> is used to remove the mapping for <code>v</code>.</p>
<p><code>nmap</code> is recursive, if as we mapped <code>w</code> to another action already, if we create mapping for a to w, a will execute the existing mapping behavior for <code>w</code> and not it’s default behavior.</p>
<p>I recommended you always use use non-recursive mappings, except if you actually need recursion.</p>
<p>:map --&gt; normal, visual, operator-pending<br />
:nmap --&gt; normal<br />
:xmap --&gt; visual<br />
:cmap --&gt; command-line<br />
:omap --&gt; operator-pending</p>
<p>If you want to preview your current mappings for Normal mode, just run <code>:nmap</code> command</p>
<p>For further information on this topic, run command <code>:h mapping</code> and <code>:h key-notation</code>.</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Vim</category>
        <category>Vim快捷键3</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>vim 运算符汇总</title>
    <url>/2024/04/10/vim_operators_post/</url>
    <content><![CDATA[<p><code>+&lt;linenumber&gt;</code> the cursor will be positioned on the specified line for the first file you open.</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim +125 .vimrc</span><br></pre></td></tr></table></figure>
<p><code>+&lt;string&gt;</code> the cursor will positioned on the first line containing the specified string in the first file you open.</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim +Plug .vimrc</span><br></pre></td></tr></table></figure>
<p><code>+cmd</code> the command ‘cmd’ will be executed after the first file has been read. It’s interpreted as the Ex command.</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim +$ .vimrc</span><br></pre></td></tr></table></figure>
<p><code>-x</code> use encryption to read or write files.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim -x .vimrc</span><br></pre></td></tr></table></figure>
<p>whenever you’re not typing, it’s better to get back to Normal mode.</p>
<p><code>ctrl-o</code> when you are in Insert mode, and press ctrl-o, you will enter Command mode, but after execute one command, you will be automatically sent back to Insert mode.</p>
<p><code>d4w</code> you will delete four words after your cursor.<br />
<code>:e &lt;filename&gt;</code> open a file in your current session.</p>
<p>You entered a file, want to open another file,<br />
<code>r newfile.txt</code> insert new file below the cursor in current buffer.<br />
<code>0r newfile.txt</code> insert new file before the first line.<br />
<code>r!sed -n 2,8p newfile.txt</code> insert lines 2 to 8 from newfile below the cursor.<br />
<code>r !ls</code> insert a directory listing below the cursor.</p>
<p><code>ZZ</code> Exit Vim but write only when changes have been made.<br />
<code>qa</code> Exit all opened files in current Vim session.</p>
<p><code>sav newfilename.txt</code> Save current buffer as a new file by new name.</p>
<p><code>w,W,e,E,b,B</code></p>
<p><code>6j</code> take you six lines below.<code>3w</code> take you to the start of the 3rd world next world.</p>
<p><code>ctrl-d</code> scroll down half page.<br />
<code>ctrl-u</code> scroll up half page.<br />
<code>ctrl-f</code> forwards  down full page<br />
<code>ctrl-b</code> backwards up full page</p>
<p><code>gg</code> go to the top of the file<br />
<code>G</code> go to the bottom of the file<br />
<code>50%</code> go to line at the 50% of the file<br />
<code>:linenumber</code> jump to line specified<br />
<code>&#123;</code> go to the beginning of the current paragraph<br />
<code>&#125;</code> go to the end of the current paragraph<br />
<code>%</code> go to the matching pair of (),[],{}</p>
<p><code>H</code> Move cursor to the highest line in current window<br />
<code>M</code> Move cursor to the middle line of the current window<br />
<code>L</code> Move cursor to the lowest line of the current window</p>
<p>search forward <code>/</code> search backward <code>?</code> n⇌N</p>
<p>Place your cursor to any word, Press <code>*</code> Vim will search forwards for the next occurence of that word. Press <code>#</code> Vim will search backwards for the word under your cursor.<br />
but these two commands are searching for exact words, if you don’t want exact word matching, use commands <code>g*</code> and <code>g#</code> accordingly.<br />
in Command mode, <code>ctrl-o</code> jump back to your previous position. <code>ctrl-i</code> jump forwards.</p>
<p>place the cursor to any word you want to search. Press<code>:/</code> then press <code>ctrl-r</code> and then <code>ctrl-w</code>, these will copy the word under cursor to the command line, ready for searching.</p>
<p><code>Ex</code> open current dir in current window.<br />
<code>Ex &lt;dir&gt;</code> open specified directory.<br />
<code>:Sex</code> open current dir in horizontal split window.<br />
<code>:Vex</code> open current dir in vertical split window. When you hit enter, it will open file in the original dir window.<br />
<code>Lexplore</code> open current dir in vertical split window, When you hit enter, it will open file in the original file window.<br />
<code>:Tex</code> open current dir in a new tab.<br />
You can change the dir listing view to show more or less information, change the sorting order or hide some kind of files. you can hit <code>i</code> to cycle through the view types. There are four of them: thin, long, wide and tree. Once you choose your favorite, set it to be defalut one in your .vimrc file, like: <code>let g:netrw_liststyle = 3</code></p>
<p><code>vim /Users/ken</code> with Vim, not only can you open files, but you can also open directories.<br />
<code>D</code> deletes the file under the cursor.<br />
<code>R</code> rename the file under the cursor.<br />
<code>X</code> executes the file under the cursor.<br />
<code>%</code> creates a new file in the current dir. Vim will ask you for a file name and open a new buffer.<br />
When you hit <code>Enter</code> to open a file, it will be opened in the same window as netrw, if you would like to keep the netrw in a side split, you can add <code>let g:netrw_browe_split = 4</code>.</p>
<p>If you’re not sure of your home directory location, run<code>echo $HOME</code> in Vim.<br />
<code>:colorschemeㄩ</code> then press <code>Tab</code> you can choose the build-in scheme, once you find the color scheme you like, add it to .vimrc file:<code>colorscheme &lt;scheme_name&gt;</code></p>
<p><code>set cursorline</code> mark the line the cursor is currently in.<br />
<code>set cursorcolumn</code> mark the current column of the cursor.<br />
<code>:g</code> or <code>ctrl+g</code> you can show detailed information about number of lines, words, characters, etc. in you current bufffer.</p>
<p>You can press <code>u</code> in Normal mode to call undo command, if you want to undo multiple times, attach a digit prefix, for example <code>5u</code> to undo the last 5 changes<br />
<code>U</code> undo all recent changes on the current line.<br />
<code>ctrl-r</code> you’ll run the redo command.</p>
<p><code>:earlier &lt;digit&gt;</code> revert last <digit> changes<br />
<code>:later &lt;digit&gt;</code> redo <digit>last changes .</p>
<p><code>earlier 2d</code> undo changes in last 2 days .<br />
<code>ea 3h</code> undo changes in last 3 hours .<br />
<code>ea 1m</code> undo changes in last 1 minute<br />
<code>lat 15s</code> redo all the changes in last 15 seconds<br />
<code>:earlier 3f</code> undo last 3 file states(last 3 buffer writes)</p>
<p>Vim creates an undo branch every time you hit <code>u</code>. The branch represents the state of the file before you execute undo. So you can use <code>g-</code>command to move backward or <code>g+</code> to move forward between these branches.</p>
<p>Vim supports persistent undo/redo, you can run undo/redo even from your previous sessions.</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>Vim</category>
        <category>Vim 快捷键2</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>vim shortcuts</title>
    <url>/2024/04/09/vim%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86post/</url>
    <content><![CDATA[<ol>
<li>
<p>jump to the top of the file <code>gg</code></p>
</li>
<li>
<p>jump to the end of the file <code>G</code></p>
</li>
<li>
<p><code>$ vim +33 my_file.txt</code>, the cursor will be positioned on the line 33 for the first file you open</p>
</li>
<li>
<p>In Vim, the -c cmd option allows you to execute a command after the first file has been read. This can be useful for automating tasks or customizing Vim’s behavior when opening a file.</p>
<p>Here’s how you can use the -c cmd option in Vim:</p>
<ol>
<li><strong>Open a file and run a command</strong>: You can open a file in Vim and run a command immediately after the file is loaded. For example, to open a file example.txt and jump to line 10, you can use the following command:</li>
</ol>
<p><code>vim -c &quot;normal 10G&quot; example.txt</code></p>
<p>This command will open example.txt in Vim and move the cursor to line 10.</p>
<ol start="2">
<li><strong>Run multiple commands</strong>: You can also chain multiple commands using the -c option. Separate each command with a semicolon ;. For example, to open a file and set syntax highlighting to a specific type, you can use:</li>
</ol>
<p><code>vim -c &quot;set syntax=python&quot; -c &quot;normal G&quot; example.py</code></p>
<p>This command will open <a href="http://example.py">example.py</a> in Vim, set the syntax highlighting to Python, and move the cursor to the end of the file.</p>
<ol start="3">
<li><strong>Execute an Ex command</strong>: You can execute Ex commands (commands that start with 😃 using the -c option. For example, to open a file and save it with a different name, you can use:</li>
</ol>
</li>
</ol>
<p>​<br />
<code>vim -c &quot;:w newfile.txt&quot; example.txt</code></p>
<pre><code>   This command will open example.txt in Vim and save it as newfile.txt.

   Using the -c cmd option in Vim provides flexibility in automating tasks or customizing Vim's behavior when opening files. You can experiment with different commands to suit your specific requirements. 
</code></pre>
]]></content>
      <categories>
        <category>编程</category>
        <category>Vim</category>
        <category>Vim快捷键1</category>
      </categories>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>一类项目获取环保许可的要求</title>
    <url>/2024/03/29/%E4%B8%80%E7%B1%BB%E9%A1%B9%E7%9B%AE%E8%8E%B7%E5%8F%96%E7%8E%AF%E4%BF%9D%E8%AE%B8%E5%8F%AF%E7%9A%84%E8%A6%81%E6%B1%82/</url>
    <content><![CDATA[<p>一类项目对环境影响很小，且影响不回超过活动地点。需要提交电子申请、附上一般要求中提及的文件并且遵守相关条件。</p>
<p><strong>一般要求</strong></p>
<ol>
<li>填写分类表格（<a href="https://raw.githubusercontent.com/zmz231126/bolgpicture/main/202403291608962.pdf">点击此处下载</a>）</li>
<li>项目简单的初始报告</li>
<li>无害和已经许可的工业垃圾（液体和固体）的搬运和清理合同</li>
<li>与认证机构签署的固体市政垃圾的搬运和清理合同</li>
<li>商业登记证</li>
<li>税务登记证</li>
<li>身份证或者居住证</li>
<li>产权契约或者租赁合同</li>
</ol>
<p><strong>相关条件</strong></p>
<ul>
<li>商会或者合法机构认证的项目所有人的授权书。</li>
</ul>
<p><strong>更新一类环保许可的要求</strong></p>
<ol>
<li>上一阶段环保登记证书</li>
<li>上面要求中的3-8项。</li>
</ol>
<p><a href='https://ncec.gov.sa/%d9%85%d8%aa%d8%b7%d9%84%d8%a8%d8%a7%d8%aa-%d8%a7%d9%84%d8%ad%d8%b5%d9%88%d9%84-%d8%b9%d9%84%d9%89-%d9%85%d9%88%d8%a7%d9%81%d9%82%d8%a9-%d8%a8%d9%8a%d8%a6%d9%8a%d8%a9-%d9%84%d9%84%d9%81%d8%a6%d8%a9'>本文引用自nece网站</a></p>
]]></content>
      <categories>
        <category>制度学习</category>
        <category>沙特环保制度</category>
      </categories>
      <tags>
        <tag>建厂</tag>
        <tag>沙特投资</tag>
        <tag>沙特</tag>
        <tag>沙特环境监察中心</tag>
      </tags>
  </entry>
  <entry>
    <title>元组</title>
    <url>/2024/04/06/%E5%85%83%E7%BB%84/</url>
    <content><![CDATA[<p>元组(tuple)</p>
<ul>
<li>是不可变的序列, 其他的操作方法跟list是一样的. 当我们希望数据不被改变时, 就可以用元组.</li>
<li>元组使用小括号()创建, 而且是可以省略的, 列表使用[]创建.</li>
<li>元组不为空, 即时只有一个元素, 也要有一个逗号比如<br />
<code>my_tuple = 40,</code></li>
<li>元组的解构, 就是将元组中的每一个元组分别赋值给一个变量, 比如:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_tuple = <span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span></span><br><span class="line">a,b,c,d = my_tuple</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>((b))</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(d)</span><br></pre></td></tr></table></figure>
<p>output 为: 10,20,30,40<br />
在进行交换值时, 我们可以用到, 比如<br />
a = 10<br />
b = 20<br />
交换a和b的值, 只需要. a,b = b, a<br />
这个道理是相同的</p>
<ul>
<li>对一个元组进行解构时, 变量数量必须和元组中的数量一致.<br />
我们也可以在变量前加<code>*</code>, 这样此变量将会获取元组中所剩余的元素.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_tuple = <span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span></span><br><span class="line">a,b,*c = my_tuple</span><br></pre></td></tr></table></figure>
<p>此时a = 10, b = 20, c = [30,40]<br />
如果中间变量带星号, 最后一个两端分别取各自的变量, 中间<br />
变量全部给带<em>的变量. 同理第一个变量带</em>, 后边的变量从末尾给自分配,<br />
前边的都给第一个带<em>的变量.</br><br />
但是不能出现多个</em>变量.</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>函数介绍2</title>
    <url>/2024/04/09/%E5%87%BD%E6%95%B0%E4%BB%8B%E7%BB%8D2/</url>
    <content><![CDATA[<h1 id="help"><a class="markdownIt-Anchor" href="#help"></a> help()</h1>
<p>help() 是python中的内置函数, 使用它可以可以查询函数的用法.但是当我们使用help()来查询自定义函数的时候，它无法显示函数的说明，只能显示函数的结构，比如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fn</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">help</span>(fn)</span><br></pre></td></tr></table></figure>
<p>返回值为<code>Help on function fn in module __main__:</code><br />
如果我们想返回函数的说明，就要在函数中添加文本字符串。比如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fn</span>(<span class="params">a,b,c</span>):</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是一个文档字符串实例</span></span><br><span class="line"><span class="string">函数的作用是：</span></span><br><span class="line"><span class="string">函数的参数：</span></span><br><span class="line"><span class="string">a.作用，类型，默认值...</span></span><br><span class="line"><span class="string">b.作用，类型，默认值...</span></span><br><span class="line"><span class="string">c.作用，类型，默认值...</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line"><span class="built_in">help</span>(fn)</span><br></pre></td></tr></table></figure>
<p>此时就会返回三个引号内的内容。我们也在参数后边加上参数的类型，比如<code>def fn(a:int,b:bool,c:str)</code></p>
<h1 id="作用域scope"><a class="markdownIt-Anchor" href="#作用域scope"></a> 作用域(scope)</h1>
<p>指的是变量生效的区域，比如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fn</span>():</span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">fn()</span><br></pre></td></tr></table></figure>
<p>此时就会返回<code>10</code><br />
我们调用函数，就是输出<code>a</code>，是因为变量和输出都是在函数的作用域内。<br />
python中的作用域分类两种：</p>
<ol>
<li>全局作用域</li>
</ol>
<ul>
<li>全局作用域在程序执行时创建，在程序执行结束时销毁。</li>
<li>所有函数以外的区域就是全局作用域。</li>
<li>在全局作用域中定义的变量就是全局变量，全局变量可以在程序的任意位置被访问。</li>
</ul>
<ol start="2">
<li>函数作用域</li>
</ol>
<ul>
<li>在函数调用时创建， 在调用结束时销毁。</li>
<li>函数没调用一次，就会产生一个新的函数作用域。</li>
<li>在函数作用域中定义的变量，都是局部变量，它只能在函数内部被访问。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = <span class="number">20</span> <span class="comment"># 全局变量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fn</span>():</span><br><span class="line">    a = <span class="number">10</span> <span class="comment"># 10局部变量</span></span><br><span class="line">    <span class="built_in">print</span>(a) <span class="comment"># 只能在函数内部被访问</span></span><br><span class="line">    <span class="built_in">print</span>(b) <span class="comment"># 可以在任意位置被访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">fn()</span><br></pre></td></tr></table></figure>
<p>此时返回结果为<code>10 20</code><br />
3. 当我们使用变量时，优先在当前作用域中寻找此变量，如果没有，则继续在上一级的作用域中去寻找。如果在全局变量中依然没找到，则返回NameError。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = <span class="number">20</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fn</span>():</span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    b = <span class="number">30</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">fn()</span><br></pre></td></tr></table></figure>
<p>此时返回结果为<code>10 30</code>。<br />
4. 如果希望在函数内部使用同名的全局变量，可以使用global关键字。比如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = <span class="number">20</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fn</span>():</span><br><span class="line">    a = <span class="number">10</span></span><br><span class="line">    <span class="keyword">global</span> b</span><br><span class="line">    b = <span class="number">5</span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line">fn()</span><br></pre></td></tr></table></figure>
<p>此时返回<code>10 5</code></p>
<h1 id="命名空间space"><a class="markdownIt-Anchor" href="#命名空间space"></a> 命名空间(space)</h1>
<p>命名空间就是变量的存储位置，每一个变量都需要存储到指定的命名空间中。每一个作用域都会有一个它对应的命名空间。<br />
命名空间实际上就是一个字典，是一个专门专门用来存储变量的字典。<br />
使用locals()来获取当前作用域的命名空间。它返回的是一个字典<br />
global()函数可以用来在任意位置获取我们的全局命名空间</p>
<h1 id="递归"><a class="markdownIt-Anchor" href="#递归"></a> 递归</h1>
<ul>
<li>阶乘</li>
</ul>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">1! = 1*1 =1</span><br><span class="line">2! = 1*2 =2</span><br><span class="line">3! = 1*2*3 =6</span><br><span class="line">4! = 1*2*3*4 =24</span><br></pre></td></tr></table></figure>
<p>求10的阶乘</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">10</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>): <span class="comment"># range函数包含开始不包含结束</span></span><br><span class="line">  n *= i</span><br><span class="line"><span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure>
<p>创建一个函数，求任意数的阶乘。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">factorial</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    该函数用来求任意数的阶乘</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数n是任意数</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    n = a</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,a):</span><br><span class="line">        n *= i</span><br><span class="line">    <span class="keyword">return</span> n</span><br></pre></td></tr></table></figure>
<ul>
<li>递归式函数<br />
递归式函数就是在函数中自己调用自己.<br />
递归函数的两个要件：</li>
</ul>
<ol>
<li>基线条件：问题继续分解的条件</li>
<li>递归条件：</li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>函数简介</title>
    <url>/2024/04/06/%E5%87%BD%E6%95%B0%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>函数也是一个对象. 比如有三行代码是一个完整的功能, 这个功能在不同的地方反复调用, 那么函数就可以用来保存一些<br />
可以执行的代码, 并且可以在需要时多次调用.<br />
创建函数<br />
函数名符合标识符的命名规范</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fn</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;this is my_first_function&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>调用函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fn()</span><br></pre></td></tr></table></figure>
<p>函数创建一般都是为了实现某种功能的. 比如我们定义一个函数, 可以求任意 两个数的和.<br />
函数括号内, 可以定义数量不等的形参. 形参的概念就是声明变量, 但是没有给变量赋值.<br />
在调用函数时, 要定义实参, 传递给形参.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">a,b</span>): <span class="comment">#定义形参</span></span><br><span class="line">    <span class="built_in">print</span>(a + b) <span class="comment"># 参数运行规则</span></span><br><span class="line"><span class="comment"># 调用函数</span></span><br><span class="line"><span class="built_in">sum</span>(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="comment"># 点击运行</span></span><br></pre></td></tr></table></figure>
<p>形参中指定了默认值以后, 如果没有传递实参, 默认值生效, 如果指定了实参, 默认值无效. </br><br />
上述参数就是位置参数, 实参和形参的位置是一一对应的.</br><br />
关键字参数, 是不按照形参的顺序取传递, 而是直接根据参数名去指定传递. 关键值参数和顺序参数混合使用时,</br><br />
必须将位置参数写在前边.</p>
<hr>
实参可以是任意类型的对象. 如果形参只想的是一个对象, 当我们通过形参去修改对象时, 会影响</br>
所有指向该对象的变量.
<hr>
不定长的参数, 比如我们定义一个可以求任意多个数字的和. 在形参前加`*`那么这个形参会获得</br>
所有的实参, 并将这些实参同意保存到一个元组中.</br>
可变参数不是必须写在最后, 但是可变参数后必须要用关键字参数形式传递.
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sum</span>(<span class="params">*a</span>):</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> a:</span><br><span class="line">        result += n</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span>(<span class="comment"># 任意多个实参)</span></span><br></pre></td></tr></table></figure>
<p><code>*</code>形参只能接受位置参数.<br />
<code>**</code>形参可以接受关键字参数, 会将它们保存到一个字典中, 参数名字就是key, value就是参数的值.</br><br />
这种形参只能有一个, 并且必须写在最后.</p>
<p>传递参数时, 可以在序列类型的参数前加<code>*</code>, 这样会将序列中的元素依次作为参数传递.</br><br />
但是注意序列中元素的个数需要和形参的个数一致. </br><br />
对字典进行解包需要用两个<code>**</code>.</p>
<p>返回值, 返回值就是函数执行的结果. return 后边跟的就是函数的返回值, 可以直接使用函数的返回值, 也可以用一个变量来接受函数的返回值.</p>
<p>不写return, 或者只写return相当与返回None.<br />
return后的代码都不会执行</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>序列</title>
    <url>/2024/04/05/%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="序列"><a class="markdownIt-Anchor" href="#序列"></a> 序列</h1>
<p>序列是Python中最基本的一种数据结构, 数据结构是计算机中数据存储的方式. 序列拥抱保存一种<br />
<strong>有序</strong>的数据, 所以我们可以理解索引的概念.</br><br />
序列分为两类:</p>
<ol>
<li>可变序列: 序列中的元素可以改变<br />
列表</li>
<li>不可变序列: 元素不可改变<br />
字符串<br />
元组</li>
</ol>
<h2 id="列表list"><a class="markdownIt-Anchor" href="#列表list"></a> 列表（list）</h2>
<p>列表是一个对象. 以前我们学习的对象比如数值，只能保存一个数据， 而列表可以存储多个数据。</p>
<h3 id="如何创建列表"><a class="markdownIt-Anchor" href="#如何创建列表"></a> 如何创建列表</h3>
<p>通过<code>[]</code>创建一个列表比如<code>my_list = []</code>. 列表中存储的数据我们叫做元素.</p>
<ul>
<li>列表中的元素可以是一个或者多个, 元素之间用<code>,</code>隔开. </br></li>
<li>列表可以保存任意对象比如数值, 字符串, 布尔值, 逻辑值.</li>
<li>各个元素是按照<strong>顺序</strong>存到列表中的.</li>
<li>列表名称一般用复数.</li>
</ul>
<h3 id="获取列表元素所有序列均适用"><a class="markdownIt-Anchor" href="#获取列表元素所有序列均适用"></a> 获取列表元素(所有序列均适用)</h3>
<h4 id="索引"><a class="markdownIt-Anchor" href="#索引"></a> 索引</h4>
<ul>
<li>索引表示的是元素在列表中的位置. 索引是从<code>0</code>开始的整数,</li>
<li><code>0</code>对应的是列表中的第一个元素 </br></li>
<li>可以通过索引来调用列表中的元素, 语法规则为<code>listname[indexnumber]</code></li>
<li>可以通过<code>len()</code>获取列表的长度. 列表长度是最大索引+1.</li>
<li>索引可以用负数, 从后往前获取元素, -1表示倒数第一个.</li>
</ul>
<h4 id="切片"><a class="markdownIt-Anchor" href="#切片"></a> 切片</h4>
<p>切片是指从现有的列表中, 获取一个子列表. 语法为<code>listname[startindexnumber:endindexnumber]</code></p>
<ul>
<li>切片会包含开始元素, 不包含结束元素.</li>
<li>切片总是会返回一个新地列表, 不回影响原来地列表.</li>
<li>开始位置和结束位置可以任意省略一个.</li>
<li>切片还可以加入<strong>步长</strong>.表示间隔, 默认为1, 步长也可以为负数, 用法比如:</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">students = [<span class="string">&#x27;sunwukong&#x27;</span>,<span class="string">&#x27;zhubajie&#x27;</span>,<span class="string">&#x27;shaheshang&#x27;</span>,<span class="string">&#x27;tangseng&#x27;</span>,<span class="string">&#x27;zhizhujing&#x27;</span>,<span class="string">&#x27;baigujing&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(students[::<span class="number">2</span>])</span><br></pre></td></tr></table></figure>
<p>返回值<code>['sunwukong', 'shaheshang', 'zhizhujing']</code></p>
<h3 id="通用操作"><a class="markdownIt-Anchor" href="#通用操作"></a> 通用操作</h3>
<ul>
<li><code>+</code>可以将列表合并为一个列表</li>
<li><code>*</code>可以将列表重复, 生成一个新列表</li>
<li><code>in / not in</code>检查元素是否存在指定列表中, 比如 <code>print('tangseng' in students)</code>返回<code>True</code></li>
<li><code>len()</code>获取列表中元素的个数</li>
<li><code>min()</code>获取列表中的最小值</li>
<li><code>max()</code>获取列表中的最大值<br />
这几个主要用于数值列表, 字符串比较utf8编码值, 没有意义.</li>
<li><code>index()方法</code><br />
<strong>方法</strong>和<strong>函数</strong>基本一样, 只是<strong>方法</strong>必须用<code>对象.方法()</code>调取. <strong>方法</strong>必须用对象调用.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(students.index(<span class="string">&#x27;sunwukong&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>返回<code>0</code><br />
如果元素不存在于列表(对象)会报错. 如果元素有相同的多个, 那么会返回第一个出现的元素的索引.</br><br />
index()后边还可以带两个可选参数. 两个参数指定查找的其实位置, 包括开始, 不包括结束.</p>
<ul>
<li><code>count()方法</code><br />
统计元素出现次数的<strong>方法</strong>.</li>
</ul>
<h3 id="修改列表"><a class="markdownIt-Anchor" href="#修改列表"></a> 修改列表</h3>
<h4 id="通过索引修改"><a class="markdownIt-Anchor" href="#通过索引修改"></a> 通过索引修改</h4>
<ul>
<li>修改元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">students = [<span class="string">&#x27;sunwukong&#x27;</span>,<span class="string">&#x27;zhubajie&#x27;</span>,<span class="string">&#x27;shaheshang&#x27;</span>,<span class="string">&#x27;tangseng&#x27;</span>,<span class="string">&#x27;zhizhujing&#x27;</span>,<span class="string">&#x27;baigujing&#x27;</span>]</span><br><span class="line">students[<span class="number">0</span>] = <span class="string">&#x27;孙悟空&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;修改后<span class="subst">&#123;students&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>return</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">修改后[<span class="string">&#x27;孙悟空&#x27;</span>, <span class="string">&#x27;zhubajie&#x27;</span>, <span class="string">&#x27;shaheshang&#x27;</span>, <span class="string">&#x27;tangseng&#x27;</span>, <span class="string">&#x27;zhizhujing&#x27;</span>, <span class="string">&#x27;baigujing&#x27;</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li><code>del</code>删除元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">students = [<span class="string">&#x27;sunwukong&#x27;</span>,<span class="string">&#x27;zhubajie&#x27;</span>,<span class="string">&#x27;shaheshang&#x27;</span>,<span class="string">&#x27;tangseng&#x27;</span>,<span class="string">&#x27;zhizhujing&#x27;</span>,<span class="string">&#x27;baigujing&#x27;</span>]</span><br><span class="line"><span class="keyword">del</span> students[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(students)</span><br></pre></td></tr></table></figure>
<p>return</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;孙悟空&#x27;</span>, <span class="string">&#x27;zhubajie&#x27;</span>, <span class="string">&#x27;tangseng&#x27;</span>, <span class="string">&#x27;zhizhujing&#x27;</span>, <span class="string">&#x27;baigujing&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h4 id="通过切片修改"><a class="markdownIt-Anchor" href="#通过切片修改"></a> 通过切片修改</h4>
<ul>
<li>在给切片赋值时, 必须使用序列. 因为切片返回的就是一个序列. 字符串也是一个序列.</li>
<li>students[0:2] = [‘牛魔王’,‘红孩儿’,‘二郎神’] 把序列中前两个元素替换为这三个元素.</li>
<li>students[0:0] = [‘牛魔王’] 在索引为0的元素前添加一个新元素.</li>
<li>当设置了步长时, 必须和切片中元素必须和序列中元素一致.</li>
<li>可以利用切片删除元素
<ul>
<li>del students[0:2]</li>
<li>del students[::2]</li>
<li>students[1:3] = []</li>
</ul>
</li>
</ul>
<h3 id="列表的方法"><a class="markdownIt-Anchor" href="#列表的方法"></a> 列表的方法</h3>
<ul>
<li><code>append(-) method</code>向列表的最后添加一个元素.</li>
<li><code>insert(index,_) method</code>向列表的指定位置加入元素. 有两个参数: 第一个要插入的位置(原元素后移), 第二个为插入的新元素.</li>
<li><code>extend([_,_,_])</code>使用新的序列扩展当前序列. 类似append()method.</li>
<li><code>clear()</code>清空序列</li>
<li><code>pop(index)</code>删除指定元素, 并返回被删除的元素.</li>
<li><code>remove(_)</code>删除指定元素, 相同元素有多个时, 删除第一个.</li>
<li><code>reverse()</code>将元素倒序.</li>
<li><code>sort()</code>对列表元素进行排序. 默认生序排列, 加入参数<code>reverse = True</code>时变为降序排列.</li>
</ul>
<h3 id="遍历列表"><a class="markdownIt-Anchor" href="#遍历列表"></a> 遍历列表</h3>
<p>将列表中的所有元素都取出来.</p>
<ol>
<li>可以通过while循环来遍历列表.</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">students = [<span class="string">&#x27;孙悟空&#x27;</span>,<span class="string">&#x27;猪八戒&#x27;</span>,<span class="string">&#x27;沙和尚&#x27;</span>,<span class="string">&#x27;唐僧&#x27;</span>]</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(students):</span><br><span class="line">    <span class="built_in">print</span>(students[i])</span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>return</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">孙悟空</span><br><span class="line">猪八戒</span><br><span class="line">沙和尚</span><br><span class="line">唐僧</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>for循环遍历列表<br />
语法:<br />
for variant in series:<br />
code block<br />
每执行一次, 就会将序列中的一个元素赋值给变量, 有几个元素就执行几次.</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">students = [<span class="string">&#x27;孙悟空&#x27;</span>,<span class="string">&#x27;猪八戒&#x27;</span>,<span class="string">&#x27;沙和尚&#x27;</span>,<span class="string">&#x27;唐僧&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> students:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>
<p>return</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">孙悟空</span><br><span class="line">猪八戒</span><br><span class="line">沙和尚</span><br><span class="line">唐僧</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>沙特办理工业许可证的要求和流程</title>
    <url>/2024/03/28/%E5%8A%9E%E7%90%86%E5%B7%A5%E4%B8%9A%E8%AE%B8%E5%8F%AF%E7%9A%84%E8%A6%81%E6%B1%82/</url>
    <content><![CDATA[<h1 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h1>
<p>沙特工业和矿产资源部提供工业许可证颁发服务，它是本部根据海湾国家合作委员会统一工业管理制度颁发的文件。允许根据特定的流程和机制从事工业项目，从投资者基础建设，施工到生产提供便利。</p>
<h1 id="企业在申请工业许可证时的三个阶段"><a class="markdownIt-Anchor" href="#企业在申请工业许可证时的三个阶段"></a> 企业在申请工业许可证时的三个阶段</h1>
<p>工业企业在申请工业许可时有三个阶段，这三个阶段反映了工业项目的发展情况。每个阶段都需要从相关部门申请必要的工业许可。</p>
<h2 id="基础阶段"><a class="markdownIt-Anchor" href="#基础阶段"></a> 基础阶段</h2>
<p><strong>要求</strong></p>
<ul>
<li>从事工业活动的商业注册证书</li>
<li>在工业平台提交颁发工业许可的服务</li>
<li>立即颁发（不受本部限制的工业活动）</li>
</ul>
<p><strong>特点</strong></p>
<ul>
<li>在工业许可证中注册要生产的产品</li>
<li>可以在负责场地分配的相关机构申请分配场地</li>
<li>可以申请工业贷款</li>
<li><span style='background-color: yellow;'>可以申请配电</span></li>
</ul>
<p>许可证的有效期为一年，可以申请更新。</p>
<h2 id="建设阶段"><a class="markdownIt-Anchor" href="#建设阶段"></a> 建设阶段</h2>
<p><strong>要求</strong></p>
<ul>
<li>从事工业活动的商业注册证书</li>
<li>从能源部分配能源</li>
<li>从分配场地的机构获得地点许可证/合同</li>
<li>环保建设许可证</li>
<li>在工业平台提交阶段升级申请</li>
</ul>
<p><strong>特点</strong></p>
<ul>
<li>在建设阶段提供劳工支持</li>
<li>为机械设备免关税</li>
<li>为零配件免关税</li>
<li>化学品清理</li>
<li>根据法定要求，经该部批准或在合作委员会框架内商定的任何其他福利或豁免</li>
</ul>
<p>许可证的有效期为一年，可以申请更新。</p>
<h2 id="生产阶段"><a class="markdownIt-Anchor" href="#生产阶段"></a> 生产阶段</h2>
<p><strong>要求</strong></p>
<ul>
<li>从事工业活动的商业注册证书</li>
<li>从相关部门获取的安全环保运行证书</li>
<li>在工业平台提交升级申请</li>
<li>从其他相关部门获得的经营要求和许可证，包括经营军工、食品和药品活动。</li>
</ul>
<p><strong>特点</strong></p>
<ul>
<li>为生产阶段提供劳工支持</li>
<li>生产投入品免关税</li>
<li>机械设备免关税</li>
<li>零配件免关税</li>
<li>化学品清理</li>
<li>原产地证书</li>
<li>根据法定要求，经该部批准或在合作委员会框架内商定的任何其他福利或豁免</li>
</ul>
<p>许可证的有效期为五年。</p>
<h1 id="条件"><a class="markdownIt-Anchor" href="#条件"></a> 条件</h1>
<p>申请人必须遵守：</p>
<ul>
<li>海湾国家合作委员会统一工业管理制度中提到了的条款和现行的法规。</li>
<li>每6个月在本部电子网站上更新工厂信息。</li>
<li>允许本部员工进入工业场地审查相关文件和账户，监督生产活动等。</li>
<li>未经本部同意不得扩大、发展、更换产品、工业项目合并或停止工业项目。</li>
<li>允许本部审查企业相关的所有数据并提交给所有政府机构。</li>
<li>只允许在完成工业项目、获得了安全环保许可以及其他部门的要求后进行工业活动和实际生产，然后需要将工业许可证升级到“生产”。</li>
</ul>
<h1 id="颁发许可证所需时间"><a class="markdownIt-Anchor" href="#颁发许可证所需时间"></a> 颁发许可证所需时间</h1>
<p>立即颁发（本部限制的活动除外）</p>
<p><a href="https://mim.gov.sa/mim/services/31393/">本文翻译自工业部网站</a></p>
]]></content>
      <categories>
        <category>制度学习</category>
        <category>沙特工业和矿产资源部制度</category>
      </categories>
      <tags>
        <tag>沙特投资</tag>
        <tag>沙特</tag>
        <tag>工业许可证</tag>
        <tag>沙特工业和矿产资源部</tag>
      </tags>
  </entry>
  <entry>
    <title>变量和标识符</title>
    <url>/2024/03/31/%E5%8F%98%E9%87%8F%E5%92%8C%E6%A0%87%E8%AF%86%E7%AC%A6/</url>
    <content><![CDATA[<p>使用变量不需要声明，直接为变量赋值，但是不能使用未被赋值的变量</p>
<p>python是一个动态类型的语言，可以给变量赋<strong>任意类型的值</strong>。也可以任意修改变量的值。</p>
<p>通常变量的名要有意义，比如年龄18，那么我们可以写<code>age = 18</code></p>
<p>sypder快捷键注释</p>
<ol>
<li>Ctrl + 1	注释/反注释</li>
<li>Ctrl + 4/5	块注释/块反注释</li>
<li>Ctrl + L	跳转到行号</li>
<li>Tab/Shift + Tab	代码缩进/反缩进</li>
<li>Ctrl ＋I	显示帮助</li>
</ol>
<hr />
<p>标识符：html中是名值对，这里是标识符和值成对。</p>
<p>python中所有可以自主命名的内容都是标识符。比如变量名、函数名、类名。</p>
<ol>
<li>标识符只能含有字母、数字、下划线。但是不能用数字开头，一般都是用字母开头。</li>
<li>标识符不能是python关键字和保留字。不建议使用函数名作为标识符。会导致函数被覆盖。</li>
<li>规范：
<ol>
<li>下划线命名法，比如<code>max_length</code>, <code>hello_world</code>（用得最多）</li>
<li>帕斯卡命名法，每个单词开头字母大写，其余小写，比如<code>MaxLength</code>, <code>HelloWorld</code>（类名，使用此类）</li>
<li></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>spyder快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>可变对象</title>
    <url>/2024/04/06/%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>对象的三个属性:</p>
<ul>
<li>id</li>
<li>类型</li>
<li>值<br />
可变是指的<strong>值</strong>可变.<br />
我们修改对象时, 如果有其他变量也指向了该对象, 那么这几个变量也会改变. 注意, 它们的id都没有改变. 因为修改<br />
对象是修改对象的值.<br />
给变量重新赋值时, 不影响其他变量.<br />
<code>==</code>比较的是对象的值是否相等, <code>is/is not</code>是比较对象的id是否相等.</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>土地占用和建筑元素之间的分布比率</title>
    <url>/2024/03/29/%E5%9C%9F%E5%9C%B0%E5%8D%A0%E7%94%A8%E5%92%8C%E5%BB%BA%E7%AD%91%E5%85%83%E7%B4%A0%E4%B9%8B%E9%97%B4%E7%9A%84%E5%88%86%E5%B8%83%E6%AF%94%E7%8E%87/</url>
    <content><![CDATA[<p>土地占用和建筑元素之间的分布比率：</p>
<ol>
<li>最大建设面积和土地面积的比率在50-60%之间波动，最小不低于45%。</li>
<li>交通线、车辆跑道、退线、停车区域、景观区域和装卸区域占占地面地的40-50%。</li>
<li>根据下面的表格，空隙分配在工业建筑之间。</li>
<li>各个单元和仓库的比例可能根据工厂的要求进行修订，使的工业使用率不低于建筑面积的43%<sup>8</sup></li>
<li>容积率（floor area ratio)也就是建筑物和土地面积的比率，不高于1.5.</li>
</ol>
<table>
<thead>
<tr>
<th>表4：</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>场地内建设比率</td>
<td></td>
</tr>
<tr>
<td>土地使用率</td>
<td>比率</td>
</tr>
<tr>
<td>50%</td>
<td>建设比率</td>
</tr>
<tr>
<td>45%≤</td>
<td>最小建设比率</td>
</tr>
<tr>
<td>60%≥</td>
<td>最大建设比率</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>表5:</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>工厂各个面积的分配比率</td>
<td>比率</td>
</tr>
<tr>
<td>工业建筑元素</td>
<td></td>
</tr>
<tr>
<td>生产</td>
<td>40-60%（随工厂规模的增大而减小）</td>
</tr>
<tr>
<td>仓库</td>
<td>30-40%（随工厂规模的扩大而增大）</td>
</tr>
<tr>
<td>管理（可选）</td>
<td>7-15%（随工厂规模的扩大而增大）</td>
</tr>
<tr>
<td>员工服务</td>
<td>3-5%（随工厂规模的扩大而增大）</td>
</tr>
</tbody>
</table>
<blockquote>
<p>[!CAUTION]</p>
<p>这个比率是土地允许使用的面积，不是土地的总面积。</p>
</blockquote>
]]></content>
      <categories>
        <category>制度学习</category>
        <category>沙特工业园制度</category>
      </categories>
      <tags>
        <tag>建厂</tag>
        <tag>沙特投资</tag>
        <tag>沙特</tag>
        <tag>沙特工业园</tag>
      </tags>
  </entry>
  <entry>
    <title>字典</title>
    <url>/2024/04/06/%E5%AD%97%E5%85%B8/</url>
    <content><![CDATA[<ul>
<li>字典是一种新的数据结构, 称为映射(mapping)</li>
<li>字典的作用和列表类似, 都是存储对象的容器</li>
<li>列表存储数据的性能良好, 但是查询数据的性能很差.</li>
<li>字典中, 每一个元素都有一个唯一的名字, 通过这个名字可以快速查到指定的元素,<br />
它相当于列表的索引, 但是这个名字更好记忆.</li>
<li>在查询元素时, 字典的效率很快</li>
<li>字典中可以存储多个对象, 每个对象都有一个唯一的名字<code>key</code>. 这个对象称为<code>value</code><br />
字典又称为<code>key-value</code>结构. 一个<code>key-value</code>称为一个<code>item</code></li>
<li>使用<code>&#123;&#125;</code>创建字典,  my_dict = {key:value,key:value}.<br />
<code>value</code>可以是任意类型数据, <code>key</code>可以使任意的不可变对象, 一般会使用<code>str</code>. 字典的<code>key</code>是<br />
不能重复的, 如果重复, 后边的项(item)会替换前边的项.<br />
我们可以多行编写字典, 这样看起来更加清晰.</li>
</ul>
<h2 id="字典的使用"><a class="markdownIt-Anchor" href="#字典的使用"></a> 字典的使用</h2>
<p>我们还可以使用<code>dict()</code>函数来创建字典: 比如：<br />
d = dict(name=‘孙悟空’,age=18,gender=‘男’)<br />
output 为:<code>&#123;'name': '孙悟空', 'age': 18, 'gender': '男'&#125;,这里可以看到，自动为age 加上了引号。 </code><br />
这种方式创建的字典，它的<code>key</code>都是字符串。</p>
<ul>
<li>双值序列，序列中只有两个值，比如[1,2],(‘a’,3),‘ab’.</li>
<li>子序列，如果序列中的元素也是序列，我们称这个元素为子序列。比如：[(1,2),(2,5)]&gt;这里，我们在列表里放了两个元组，那么这两个元组就是双值子序列。</li>
<li>双值子序列，就是子序列中只有两个值。</li>
<li>dict()函数可以将双值子序列转换为字典。比如：<br />
d = dict([(‘name’,‘孙悟空’),(‘age’,18)])。output为：<code>&#123;'name':'孙悟空','age':18&#125;</code></li>
<li>len()函数获取字典中item的个数。</li>
<li><code>in/not</code>检查字典中是否包含指定的<code>key</code>，</li>
<li>根据key获取值，语法为：d[key].</li>
<li>另一种为<code>get()方法</code>。d.get(‘key’,‘默认值’)，当获取不到值时，返回默认值。</li>
</ul>
<h2 id="修改字典"><a class="markdownIt-Anchor" href="#修改字典"></a> 修改字典</h2>
<p>如果存在</p>
<ul>
<li>my_dict[key] = newvalue 修改<br />
如果不存在, 则会添加.</li>
<li>my_dict.setdefault(“key”,“value”)如果字典中存在对应的key, 则没有影响, 如果没有, 就添加默认item</li>
<li><code>update()方法</code>,my_dict.update(my_dict2),将my_dict2中的item加到my_dict里边. 如果发现重复<code>key</code><br />
my_dict2会替换my_dict1</li>
<li>popitem()方法. 随机删除一个键值对(一般是最后一个). 删除后, 有返回值(两个元素的元组).</li>
<li>pop(key,optional default value)method. delete the item according to the key arguments. it will return a<br />
value. if you set a default value, it will return default value if there is no present value.</li>
<li>clear() remove all from the dict.</li>
<li>copy(). return a shallow copy for the dict. if we want to create independent copy<br />
of the established dict, you should call this method. they are different from each other<br />
in terms of object id. but it is a shallow copy, if an item value is a dict as wel,</li>
</ul>
<h2 id="遍历字典"><a class="markdownIt-Anchor" href="#遍历字典"></a> 遍历字典</h2>
<p>keys()method.  it will return all keys in dict. this method will return a sequence.<br />
通过遍历keys来获取所有的键.<br />
values()like keys(), it will return all values in dict.<br />
items(), this method will return all items in dict, it will generate a sequence,<br />
this sequence include a double value subsequence. like others, you can iterate the<br />
items by using for loop.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> my_dict.items():</span><br><span class="line">    <span class="built_in">print</span>(k,v)</span><br></pre></td></tr></table></figure>
<p>到此结束<br />
This is-a line, with special/separated/words (and some more).</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串</title>
    <url>/2024/03/31/%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<ul>
<li>字符串用来表示文本信息, 是使用最多的数据类型. 必须用引号包围, 可以理解成某人说:“”.</li>
<li>单引号双引号都可以, 但是不可以混合使用. 但是相同的引号不可以嵌套, 但是不同的引号可以嵌套. 下边就是不用引号的嵌套</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="string">&quot;子曰:&#x27;学而时习之, 不亦说乎&#x27;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure>
<ul>
<li>引号不可以跨行使用, 需要跨行使用<code>\</code>. 注意: 这里跟<code>\n</code>的区别. 单纯的<code>\</code>只是告诉解析器我代码要换行写了, 不影响字符格式.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;锄禾日当午, \</span></span><br><span class="line"><span class="string">汗滴禾下土, \</span></span><br><span class="line"><span class="string">谁知盘中餐, \</span></span><br><span class="line"><span class="string">粒粒皆辛苦.&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure>
<p>此时返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">锄禾日当午, 汗滴禾下土, 谁知盘中餐, 粒粒皆辛苦.</span><br></pre></td></tr></table></figure>
<ul>
<li>如果要保留, 原字符串的格式, 可以使用三个引号, 三个引号可以直接跨行使用, 而且保留字符串的格式.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;&#x27;&#x27;锄禾日当午,</span></span><br><span class="line"><span class="string">行滴禾下土,</span></span><br><span class="line"><span class="string">谁知盘中餐,</span></span><br><span class="line"><span class="string">粒粒皆辛苦.&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure>
<p>此时返回值为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">锄禾日当午,</span><br><span class="line">行滴禾下土,</span><br><span class="line">谁知盘中餐,</span><br><span class="line">粒粒皆辛苦.</span><br></pre></td></tr></table></figure>
<ul>
<li>转义字符, 比如在字符串内嵌套相同的引号是不允许的, 但是可以使用转义字符,将没有语法意义的引号转义, 告诉解析器, 他就单纯是一个字符而已, 不是一个字面量.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="string">&quot;子曰:\&quot;学而时习之, 不亦说乎\&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure>
<p>返回值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">子曰:&quot;学而时习之, 不亦说乎&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>\n</code>表示换行符</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;锄禾日当午,\n汗滴禾下土,\n谁知盘中餐,\n粒粒皆辛苦.&#x27;</span> </span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure>
<p>返回值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">锄禾日当午,</span><br><span class="line">汗滴禾下土,</span><br><span class="line">谁知盘中餐,</span><br><span class="line">粒粒皆辛苦.</span><br></pre></td></tr></table></figure>
<ul>
<li><code>\t</code>表示制表符</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">w = <span class="string">&#x27;学而时习之,\t不亦说乎&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(w)</span><br></pre></td></tr></table></figure>
<p>返回值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">学而时习之,	不亦说乎</span><br></pre></td></tr></table></figure>
<ul>
<li><code>\uxxx</code>表示Unicode编码. 通过这种方式可以打印一些特殊符号.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;\u0040&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>
<p>返回值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串的复制</title>
    <url>/2024/03/31/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<p>将字符串和数字相乘, 就是复制字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;你好&#x27;</span></span><br><span class="line"></span><br><span class="line">a = a * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>
<p>返回值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你好你好</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>字面变量和变量</title>
    <url>/2024/03/31/%E5%AD%97%E9%9D%A2%E9%87%8F%E5%92%8C%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<p>【字面量】一个一个的值，它的意思就是它字面的值。在程序中可以直接使用。</p>
<p>【变量】与字面量相反。变量可以保存字面量，并且保存的字面量是不定的。</p>
<p>变量本身无意义，会跟不同的字面量表示不同的意思。</p>
<p>开发时，通常将字面量保存在变量中，通过变量来引用字面量。这样便于统一管理和引用。</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>对象(object)</title>
    <url>/2024/03/31/%E5%AF%B9%E8%B1%A1(object)/</url>
    <content><![CDATA[<h1 id="对象介绍"><a class="markdownIt-Anchor" href="#对象介绍"></a> 对象介绍</h1>
<p>Python是一个面向对象的语言. 一切皆对象.<br />
程序运行中, 所有的数据都是存储在内存中, 硬盘–&gt;内存–&gt;CPU.<br />
对象就是内存中专门用来存储指定数据的区域. 对象实际上就是一个容器.<br />
数值，字符串, None都是对象</p>
<h1 id="对象结构"><a class="markdownIt-Anchor" href="#对象结构"></a> 对象结构</h1>
<p>每个对象都有三个部分</p>
<ul>
<li>id<br />
用来标识对象的唯一性, 相当于人的身份证号.<br />
可以通过函数<code>id()</code>来查看对象的id<br />
对象一经创建, id就是无法改变了.</li>
<li>type<br />
当前对象所属的类型, 类型决定了对象的功能. 比如自行车那它有什么功能, 牛有哪些功能.<br />
<code>type()</code>查看类型<br />
同样, 类型同样无法更改</li>
<li>value<br />
对象所存储的数据.<br />
我们平时直接看到的就是对象的值. id和type要用函数才能看到.<br />
值有些对象能改变, 有些不能改变.</li>
</ul>
<h1 id="变量和对象"><a class="markdownIt-Anchor" href="#变量和对象"></a> 变量和对象</h1>
<p>a = 3<br />
这里的’3’是一个对象, 它有上部分提到的三部分构成. 对象并不是存储在变量中, 变量更像是对象的一个别名.<br />
变量中存储的是对象的id, 当我们使用变量时, 解析器根据id去寻找对象.</p>
<h1 id="类型转换"><a class="markdownIt-Anchor" href="#类型转换"></a> 类型转换</h1>
<p>类型转换不是改变对象本身的类型, 而是根据当前对象的值创建新的对象.<br />
三个函数;</p>
<ul>
<li><code>int()</code>
<ul>
<li>浮点数会直接取整, 没有四舍五入;</li>
<li>True --&gt; 1; False --&gt; 0;</li>
<li>整数的数据直接转换成整数, 不是整数字符串(11.5, None, Hello)会报错.</li>
</ul>
</li>
<li><code>float()</code>
<ul>
<li>跟<code>int()</code>类似, 但是会将数据转换成浮点数<br />
<code>str()</code>,</li>
<li>什么都可以, 只不过转换成了字符串<br />
<code>bool()</code></li>
<li>什么都可以, 转换成Ture或者Flase. 所有空性数据会转成Flase, 其他的会转成True</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>布尔值</title>
    <url>/2024/03/31/%E5%B8%83%E5%B0%94%E5%80%BC/</url>
    <content><![CDATA[<p>布尔值(bool)用来做逻辑判断. 一共有两个<code>True</code>和<code>False</code>. 注意Python是一个大小写敏感的语言.<br />
也可以理解为一个整数, true 是 1 false 是 0</p>
<p><code>None</code>空值,表示不存在.</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>循环语句</title>
    <url>/2024/04/05/%E5%BE%AA%E7%8E%AF%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<p>循环语句，可以使指定的代码块重复指定的次数，有两种while循环和for循环。</p>
<h1 id="while循环"><a class="markdownIt-Anchor" href="#while循环"></a> while循环</h1>
<p>【语法】：<br />
while 条件表达式：<br />
代码块<br />
else：</p>
<p>【执行流程】：<br />
先对条件表达式进行求值判断。如果结果为真，执行代码块，后继续对条件表达式进行判断，如此循环。直到判断条件表达式的结果为假时，停止循环。执行else。</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>数值</title>
    <url>/2024/03/31/%E6%95%B0%E5%80%BC/</url>
    <content><![CDATA[<p>数据类型：就是给变量赋的值的类型。</p>
<ul>
<li>数值
<ul>
<li>整数</li>
<li>布尔值</li>
<li>浮点数</li>
<li>复数</li>
</ul>
</li>
</ul>
<ul>
<li>字符串</li>
<li>空值<br />
编程语言是人创造的，学习的时候要关联现实生活，这样容易理解。</li>
</ul>
<p>python 数值有三种：</p>
<ul>
<li>整数（int）
<ul>
<li>数大小没有限制，可以是任意大小。</li>
<li>如果数字过长，我们可以用<code>_</code>作为分隔符，比如<strong>千位分隔符</strong>。</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="number">123_456_789</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure>
<p>返回值为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123456789</span><br></pre></td></tr></table></figure>
<p>数字不能以<code>0</code>开头。<br />
二进制数字用<code>0b</code>开头<br />
八进制数字用<code>0o</code>开头<br />
十六进制数字用<code>0x</code>开头<br />
任何进制的数字返回的都是十进制的数字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e = <span class="number">0b10</span></span><br><span class="line"><span class="built_in">print</span>(e)</span><br></pre></td></tr></table></figure>
<p>返回值为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>
<ul>
<li>浮点数（小数）<br />
所有的小数都是浮点数, 对浮点数的计算可能不准确.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="number">0.1</span> + <span class="number">0.2</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure>
<p>返回值为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0.30000000000000004</span><br></pre></td></tr></table></figure>
<p>所有不建议对浮点数进行直接运算.</p>
<ul>
<li>复数</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>文本文件和字符集</title>
    <url>/2024/03/31/%E6%96%87%E6%9C%AC%E6%96%87%E4%BB%B6%E5%92%8C%E5%AD%97%E7%AC%A6%E9%9B%86/</url>
    <content><![CDATA[<p>文本分为纯文本和富文本。</p>
<p>纯文本在计算机底层也会转换为二进制保存。</p>
<p>将字符转换为二进制码的过程叫做<strong>编码</strong>。</p>
<p>将二进制码转换成字符的过程叫做<strong>解码</strong>。</p>
<p>编码和解码时采用的规则叫做<strong>字符集</strong>。</p>
<p>常用的字符集：</p>
<ul>
<li>ASCII 美国人编码，使用7位（7个1和7个0）来对美国常用的字符进行编码。7个1和7个0的不同组合产生128个字符。</li>
<li>IS0-8859-1 欧洲的编号，使用8位进行编码，产生256个字符。</li>
<li>GB2312 GBK中国人的编码</li>
<li>Unicode 万国码。便携程序时，使用Unicode编码。Unicode有多种实现，UTF-32使用4个字节表示一个字符。UTF-16使用2到4个字节表示一个字符。UTF-8使用1-5个字节表示一个字符。</li>
</ul>
<hr />
<p>乱码</p>
<p>程序出现乱码，检查字符集是否正确。</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/26/%E6%97%A0%E7%BA%BA%E5%B8%83%E4%B8%93%E4%B8%9A%E8%8B%B1%E8%AF%AD%E6%9C%AF%E8%AF%AD1/</url>
    <content><![CDATA[<p>聚酯切片：</p>
<p>淀粉：</p>
<p>丙烯酸胶：</p>
<p>玻纤纱：</p>
<p>针刺机：</p>
<p>涤纶纺粘胎基布：</p>
<p>免税通过海关：free of duty through customs</p>
<p>钢结构：steel structure</p>
<p>钢筋：rebar /ˈriːˌbɑːr/</p>
<p>电缆：electrical cable</p>
<p>电子元器件：electron component /ɪˈlektrɑːn/</p>
<p>进口材料：imported material</p>
<p>外商独资项目：wholly foreign owned enterprise</p>
<p>全资子公司：subsidiary of solo investment</p>
<p>进口材料及设备占投资金额的比例限制是多少？<br />
What is the <strong>limit</strong> <strong>on</strong> the proportion of imported materials and equipment <strong>in</strong> the investment amount？</p>
<p>型钢：structural steel</p>
<p>圆钢：round steel</p>
<p>角钢：angle steel</p>
<p>工型钢：universal beams</p>
<p>槽型钢：channel steel</p>
<p>六角钢：hexagonal steel</p>
<p>扁钢：flat steel</p>
<p>矩形：rectangle</p>
<p>无缝管：seamless tube</p>
<p>备案手续：recordation formalities of relevant documents</p>
<p>示范合同、标准合同：model contract /ˈmɑːd(ə)l/</p>
<p>特种作业人员：special appliance operator</p>
<p>电工：electrician</p>
<p>焊工：welder</p>
]]></content>
  </entry>
  <entry>
    <title>格式化字符串</title>
    <url>/2024/03/31/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="字符串之间可以进行加法运算-但是不能和其他数据进行加法运算"><a class="markdownIt-Anchor" href="#字符串之间可以进行加法运算-但是不能和其他数据进行加法运算"></a> 字符串之间可以进行加法运算, 但是不能和其他数据进行加法运算</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;Ken&#x27;</span></span><br><span class="line">b = <span class="string">&#x27; how are you&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a + b)</span><br></pre></td></tr></table></figure>
<p>返回值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ken how are you</span><br></pre></td></tr></table></figure>
<h1 id="在创建字符串时候-可以在字符串中制定占位符s"><a class="markdownIt-Anchor" href="#在创建字符串时候-可以在字符串中制定占位符s"></a> 在创建字符串时候, 可以在字符串中制定占位符<code>%s</code></h1>
<p><code>%s&quot;%Ken&quot;</code>这里我们用Ken填充占位符<code>%s</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = <span class="string">&quot;Hello %s&quot;</span> %<span class="string">&#x27;Ken&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>
<p>返回值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello Ken</span><br></pre></td></tr></table></figure>
<p>这里注意: 在字符串外部对占位符进行填充, 填充的字符用引号包围.</p>
<p>字符串中有多个占位符时候, 后边也要用多个字符进行依次填充.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="string">&quot;Hello %s,你好 %s&quot;</span> %(<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;孙悟空&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure>
<p>返回值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello Tom,你好 孙悟空</span><br></pre></td></tr></table></figure>
<p><code>%3s</code>表示, 要填充的字符串最少是3个字符, 少于3个字符用空格补齐. <code>%3.5</code>表示填充的字符必须是3到5个, 多余5个舍去, 少于3个用空格补齐.<br />
要注意, 占位符可以用字符串填充, 也可以用数值填充, <b>也可以用变量填充</b>.</p>
<h1 id="专业的浮点数占位符是f这个占位符可以对数值的小数进行精确控制"><a class="markdownIt-Anchor" href="#专业的浮点数占位符是f这个占位符可以对数值的小数进行精确控制"></a> 专业的浮点数占位符是<code>%f</code>,这个占位符可以对数值的小数进行精确控制.</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&quot;Hello, %.2f&quot;</span> %<span class="number">123.4</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>
<p>返回值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello, 123.40</span><br></pre></td></tr></table></figure>
<p>这里<code>.2f</code>就是保留两个小数, 而且会自动四舍五入.</p>
<h1 id="整数占位符是d-它是没有四舍五入的"><a class="markdownIt-Anchor" href="#整数占位符是d-它是没有四舍五入的"></a> 整数占位符是<code>%d</code>, 它是没有四舍五入的.</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = <span class="string">&quot;Hello, %d&quot;</span> %<span class="number">123.456</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>
<p>返回值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123</span><br></pre></td></tr></table></figure>
<h1 id="格式化字符串-b格式化字符串中可以嵌入变量b-变量用包围-格式化字符串的方法是在字符串前加一个f"><a class="markdownIt-Anchor" href="#格式化字符串-b格式化字符串中可以嵌入变量b-变量用包围-格式化字符串的方法是在字符串前加一个f"></a> 格式化字符串, <b>格式化字符串中可以嵌入变量</b>, 变量用<code>&#123;&#125;</code>包围. 格式化字符串的方法是在字符串前加一个<code>f</code>.</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">123</span></span><br><span class="line">b = <span class="string">&#x27;呵呵&#x27;</span></span><br><span class="line"></span><br><span class="line">c = <span class="string">f&quot;hello <span class="subst">&#123;a&#125;</span> <span class="subst">&#123;b&#125;</span>&quot;</span></span><br><span class="line"><span class="built_in">print</span>(c) </span><br></pre></td></tr></table></figure>
<p>返回值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello 123 呵呵</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>申请沙特工业园工厂运行许可证的要求</title>
    <url>/2024/03/27/%E6%B2%99%E7%89%B9%E5%B7%A5%E4%B8%9A%E5%9B%AD%E5%B7%A5%E5%8E%82%E8%BF%90%E8%A1%8C%E8%AE%B8%E5%8F%AF%E8%AF%81%E7%9A%84%E8%A6%81%E6%B1%82%E5%92%8C%E8%A7%84%E5%AE%9A/</url>
    <content><![CDATA[<h1 id="第一阶段通过modon账户提交申请"><a class="markdownIt-Anchor" href="#第一阶段通过modon账户提交申请"></a> 第一阶段：通过MODON账户提交申请</h1>
<p><strong>申请建筑竣工和运行许可证所需文件</strong></p>
<ul>
<li>经Modon认证的安全图。</li>
<li>绝缘工程完工证明。</li>
<li>测试安全系统的模型和消防警报器材的清单。</li>
<li>电路铺设和连接安全证书。</li>
<li>跟分包商签署的消防警报系统维护的合同，分包商需要经过民防的认证。</li>
<li>环保证书。</li>
<li>工业许可证（从工业与矿产资源部网站申请）</li>
<li>军工单位建设许可和安全等级（军工企业适用）</li>
</ul>
<p><strong>运行许可证更新所需文件</strong></p>
<ul>
<li>经工业园（MODON）和民防（Civil Defense）认证的设施安全图纸。</li>
<li>跟分包商签署的消防警报系统维护的合同，分包商需要经过民防的认证。</li>
<li>测试安全系统的模型和消防警报器材的清单。</li>
<li>合格且有级别的安全员。</li>
</ul>
<p><strong>其他条件</strong></p>
<ul>
<li>跟由Modon认证的工程办公室签订合同，由工程办公室根据认证的模版检查消防和安全系统。</li>
<li>通过Shareek系统申报危险材料，说明在企业内危险品的存储、种类和危害性。</li>
<li>职业健康和安全领域内合格的安全员。</li>
<li>企业安保人员：有安保（沙特籍）</li>
<li>企业内外安装可以存储两个月记录的摄像头。（军工单位适用）</li>
<li>记录和保存出入数据（员工和拜访人员）的控制系统。（军工企业适用）</li>
</ul>
<h1 id="第二阶段参观考察"><a class="markdownIt-Anchor" href="#第二阶段参观考察"></a> 第二阶段：参观考察</h1>
<p><strong>批准颁发建筑竣工和运行许可或者更新作业许可证和安全标准需要检查的内容</strong></p>
<ul>
<li>确保与许可证相符。</li>
<li>确保消防和疏散系统运行良好且与主控制面板连接。</li>
<li>确保消防和疏散系统与认证的安全图纸相符，与认证的规格相符。</li>
<li>确保有安全员进行与安全管理相关的工作。</li>
<li>检查员工办公地点和基础设施。</li>
<li>确保企业内部的生产线、电力系统和设备和其他设备的安全。</li>
<li>确保地板、通风系统和噪声安全。</li>
<li>确保在处理、运输和储存化学材料和有害气体时，符合安全规定。</li>
<li>确保不存在不安全或者违规存储，和不符合规定的退线。</li>
</ul>
<h1 id="第三阶段颁发竣工证书和运行许可证"><a class="markdownIt-Anchor" href="#第三阶段颁发竣工证书和运行许可证"></a> 第三阶段：颁发竣工证书和运行许可证</h1>
<p>Modon致力于简化并加速与合作伙伴的合作，其中包括满足工厂需求，保护员工和工业园财产与基础。我们已经对运行许可和有效时限做了如下分类：</p>
<p><strong>第一次发放期限一年</strong><br />
对那些完成建设，满足条件，符合安全标准的企业发放我竣工和运行许可证，它可以视为是运行许可证，此许可证有效期为一年。</p>
<p><strong>更新</strong></p>
<p>【短期】：6个月</p>
<p>本许可颁发给那些些存在大量问题和违规行为，需要较长时间跟其他政府部门和相关机构完成手续，并能够快速更正错误，承诺在规定时间纠正其他问题的企业</p>
<p>【中期】：1年</p>
<p>本许可颁发给那些存在中等风险的违规行为，需要较长时间与其他政府部门和相关机构对接完成相关手续。前提是尽快纠正错误，并承诺在规定时间能纠正问题的企业。</p>
<p>【长期】：3年</p>
<p>三年有效期的许可颁发给那些没有任何问题，已经遵守了所有安全规则和标准。</p>
<p><a href='https://www.modon.gov.sa/ar/Systems/Pages/Conditions.aspx'>本文翻译自Modon网站</a></p>
]]></content>
      <categories>
        <category>制度学习</category>
        <category>沙特工业园制度</category>
      </categories>
      <tags>
        <tag>沙特投资</tag>
        <tag>沙特</tag>
        <tag>沙特工业园</tag>
        <tag>工厂运营许可</tag>
      </tags>
  </entry>
  <entry>
    <title>沙特工业园建厂要求</title>
    <url>/2024/03/28/%E6%B2%99%E7%89%B9%E5%B7%A5%E4%B8%9A%E5%9B%AD%E5%BB%BA%E5%8E%82%E8%A6%81%E6%B1%82/</url>
    <content><![CDATA[<p>工厂需要遵循【建厂条件和标准指南】中的建厂要求，可以享受Modon在工业园中提供的服务。</p>
<ul>
<li>工厂建设的单元包括：生产车间、原材料仓库、产成品仓库、员工服务、电力供应、工业安全服务、内部道路、疏散区域、<br />
管理建筑。</li>
<li>生产车间的高度满足所有任务需求，其中包括根据不同生产类型的生产线所需要的机械作业任务。</li>
<li>原材料仓库的面积限制在能满足工厂需要的30%-40%，随工厂规模（建筑面积）的增大而增大。</li>
<li>产成品仓库的面积限制在满足工厂产品存储的30%-40%，随工厂规模（建筑面积）的增大而增大。</li>
<li>工厂员工服务包括：卫生间、礼拜厅、急救、餐厅、换衣间。</li>
<li>包括给工厂服务的管理办公室。</li>
<li>供电工程包括中低压配电室和主断路器室。</li>
<li>安全服务包括：备用消防箱、灭火系统和火灾警报系统。</li>
<li>内部道路用来方便工厂不同单元的活动，并且连接工厂各个入口和主道路。</li>
<li>生产建筑和围墙之间的间隔：前方与道路之间不低于13.5米，与两侧和后方之间不低于6米。</li>
<li>申请、认证和颁发许可证的要求。</li>
</ul>
<p><a href='https://www.modon.gov.sa/ar/Systems/Pages/Requirements.aspx'>内容采集自工业园官网</a></p>
]]></content>
      <categories>
        <category>制度学习</category>
        <category>沙特工业园制度</category>
      </categories>
      <tags>
        <tag>建厂</tag>
        <tag>沙特工业园</tag>
      </tags>
  </entry>
  <entry>
    <title>沙特工业园投资流程</title>
    <url>/2024/03/27/%E6%B2%99%E7%89%B9%E5%B7%A5%E4%B8%9A%E5%9B%AD%E6%8A%95%E8%B5%84%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="工业园提供的产品和服务"><a class="markdownIt-Anchor" href="#工业园提供的产品和服务"></a> 工业园提供的产品和服务</h1>
<ol>
<li>工业用地：Modon在沙特全境提供工业用地，满足工业投资者的需求。</li>
<li>现成工厂：Modon提供不同面积且服务完备的现成工厂，支持中小企业和男女企业家。</li>
<li>融资方案：Modon提供多种融资方案，支持投资者的工业发展简化他们获取工业产品的流程。</li>
</ol>
<h1 id="申请前"><a class="markdownIt-Anchor" href="#申请前"></a> 申请前</h1>
<h4 id="获得工业产品的条件"><a class="markdownIt-Anchor" href="#获得工业产品的条件"></a> 获得工业产品的条件</h4>
<ol>
<li>从工商局网站获得的工业活动注册证书。</li>
<li>通过Shareek申请产品。</li>
</ol>
<h4 id="申请产品"><a class="markdownIt-Anchor" href="#申请产品"></a> 申请产品</h4>
<ol>
<li>填写申请表格：在表格中附上所需文件。</li>
<li>面谈：跟投资者进行面谈，讨论合作关系和工业项目的关键活动领域。</li>
<li>产品预览：拜访工业园总部，预览产品并填写预览表。</li>
<li>签署合同接受产品：在表格中附上所需文件。</li>
</ol>
<h1 id="建设阶段"><a class="markdownIt-Anchor" href="#建设阶段"></a> 建设阶段</h1>
<ol>
<li>建设咨询办公室的许可：通过Modon中的Shareek门户获取报价，研究建设咨询办公室的要求，认可报价后回去同意。可以通过网站获得咨询公司名单。</li>
<li>图纸审批：通过Shareek门户上的电子服务平台，咨询办公室根据工业园指导和建设要求，认证主规划和安全规划。</li>
<li>发出建设许可：通过Shareek门户上的电子服务平台，获得在工业园内进行建设作业的许可证书。</li>
<li>申请用电：通过Shareek门户提交用电申请，沙特电力公司进行作业。</li>
<li>现场跟进：Modon对在建工厂进行现场检查，确保建设符合Modon的标准和条件。</li>
<li>发出竣工证明和运行许可：竣工证书旨在确保企业符合Modon的建设标准和条件，此为第一次发出。</li>
<li>运行许可证：这是企业运行的许可，需要定期更新。</li>
</ol>
<h1 id="运行"><a class="markdownIt-Anchor" href="#运行"></a> 运行</h1>
<p>在发出竣工证明和运行许可，并且确保企业安全作业以后，工厂可以开始生产制造。</p>
<h4 id="电子服务"><a class="markdownIt-Anchor" href="#电子服务"></a> 电子服务</h4>
<p>在开始运行以后，企业可以通过Shareek门户上通过电子服务使用工业园提供的服务：</p>
<ul>
<li>合同管理服务</li>
<li>信件服务</li>
<li>许可服务</li>
<li>证书服务</li>
<li>供应商服务</li>
<li>工程咨询办公室服务</li>
<li>票据和投诉</li>
</ul>
<h4 id="定期跟踪"><a class="markdownIt-Anchor" href="#定期跟踪"></a> 定期跟踪</h4>
<p>Modon对工厂进行定期检查，确保工厂符合安全规定，并且保护员工安全。</p>
<p><a href='https://raw.githubusercontent.com/zmz231126/bolgpicture/main/202403291018552.pdf'>点击这里查看原文档</a></p>
]]></content>
      <categories>
        <category>制度学习</category>
        <category>沙特工业园制度</category>
      </categories>
      <tags>
        <tag>建厂</tag>
        <tag>沙特投资</tag>
        <tag>沙特工业园</tag>
      </tags>
  </entry>
  <entry>
    <title>环境变量</title>
    <url>/2024/03/31/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<p>环境变量（enviroment variable）指的是操作系统当中的一些变量。<em>主要用来配置一些路径。</em></p>
<p>比如操作系统允许我们把文件存在电脑上的任意盘符。 那么需要创建一个环境变量比如说abc，a用户把文件存储到了C盘，那么abc=C。b用户把文件存储到了D盘，那么abc=D。系统在运行的时候，只需要找abc就可以了。</p>
<ol>
<li>
<p>查看变量</p>
<ol>
<li>用户环境变量→仅对当前用户起作用</li>
<li>系统环境变量→对所有用户起作用</li>
</ol>
</li>
<li>
<p>添加环境变量</p>
<p>变量可以有多个值，各个值之间用<code>;</code>隔开。</p>
</li>
<li>
<p>删除环境变量</p>
</li>
</ol>
<hr />
<p>示例：打开终端。</p>
<p>- 输入<code>pwd</code>回车，查看当前所处的文件夹路径。</p>
<p>- 输入<code>ls</code>列出此文件夹下内所有的文件夹。</p>
<p>- 输入<code>cd空格紧跟文件夹名称</code>进入指定的文件夹。<em>必须一步一步指定不能跳级指定文件夹。但是可以书写路径指定<code>cd tmp/tmp1</code>直接指定到tmp1文件夹。</em></p>
<p>- 输入<code>mkdir 空格紧跟新建文件夹名称</code>创建文件夹。*不能同时创建父子目录，如需同时创建多层级目录，请使用<code>mkdir -p</code>比如<code>mkdir -p tmp/tmp1/tmp11</code></p>
<p>- 输入<code>rmdir 空格紧跟文件夹名称</code>删除文件夹。</p>
<p>- 输入<code>cd ..</code>返回上一级目录。</p>
<p>- 输入<code>open tmp.txt</code>打开当前所处文件夹下的tmp.txt文档。<em>同样不能越级打开。</em></p>
<hr />
<p>当我们在命令行输入一个命令（或者访问一个文件时）系统首先在当前目录寻找，如果没有找到，就会进入到path环境变量中寻找。都没有找到才会报错。</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/30/%E7%94%B3%E8%AF%B7%E5%B7%A5%E4%B8%9A%E5%9B%AD%E5%8A%A8%E5%B7%A5%E8%AE%B8%E5%8F%AF/</url>
    <content><![CDATA[<h1 id="申请工业园动工许可"><a class="markdownIt-Anchor" href="#申请工业园动工许可"></a> 申请工业园动工许可</h1>
<h2 id="第一步"><a class="markdownIt-Anchor" href="#第一步"></a> 第一步</h2>
<h3 id="注册shareek门户取得id"><a class="markdownIt-Anchor" href="#注册shareek门户取得id"></a> 注册shareek门户取得ID</h3>
<h3 id="获取调研阶段工业许可"><a class="markdownIt-Anchor" href="#获取调研阶段工业许可"></a> 获取调研阶段工业许可</h3>
<h2 id="第二步"><a class="markdownIt-Anchor" href="#第二步"></a> 第二步</h2>
<h3 id="土地租赁"><a class="markdownIt-Anchor" href="#土地租赁"></a> 土地租赁</h3>
<h3 id="申请分配能源"><a class="markdownIt-Anchor" href="#申请分配能源"></a> 申请分配能源</h3>
<h2 id="第三步"><a class="markdownIt-Anchor" href="#第三步"></a> 第三步</h2>
<h3 id="等待盈科完成公司注册流程"><a class="markdownIt-Anchor" href="#等待盈科完成公司注册流程"></a> 等待盈科完成公司注册流程</h3>
<ul>
<li>
<p>税务</p>
</li>
<li>
<p>劳动局及其相关的电子系统</p>
</li>
<li>
<p>总经理居住证</p>
</li>
</ul>
<h3 id="工业园认证的consulting-engineer-office签合同"><a class="markdownIt-Anchor" href="#工业园认证的consulting-engineer-office签合同"></a> 工业园认证的consulting engineer office签合同</h3>
<h3 id="完成主图纸和安全图纸设计认证"><a class="markdownIt-Anchor" href="#完成主图纸和安全图纸设计认证"></a> 完成主图纸和安全图纸设计认证</h3>
<h2 id="第四步"><a class="markdownIt-Anchor" href="#第四步"></a> 第四步</h2>
<h3 id="跟认证的垃圾搬运公司签合同"><a class="markdownIt-Anchor" href="#跟认证的垃圾搬运公司签合同"></a> 跟认证的垃圾搬运公司签合同</h3>
<h3 id="申请环保动工许可"><a class="markdownIt-Anchor" href="#申请环保动工许可"></a> 申请环保动工许可</h3>
<h2 id="第五步"><a class="markdownIt-Anchor" href="#第五步"></a> 第五步</h2>
<h3 id="申请工业部动工许可"><a class="markdownIt-Anchor" href="#申请工业部动工许可"></a> 申请工业部动工许可</h3>
<ul>
<li>设备进口免关税</li>
</ul>
<h3 id="申请工业园动工许可-2"><a class="markdownIt-Anchor" href="#申请工业园动工许可-2"></a> 申请工业园动工许可</h3>
<h2 id="第六步"><a class="markdownIt-Anchor" href="#第六步"></a> 第六步</h2>
<h3 id="安排安全员"><a class="markdownIt-Anchor" href="#安排安全员"></a> 安排安全员</h3>
<h3 id="安排安保"><a class="markdownIt-Anchor" href="#安排安保"></a> 安排安保</h3>
<h3 id="安排有资质的建筑公司动工"><a class="markdownIt-Anchor" href="#安排有资质的建筑公司动工"></a> 安排有资质的建筑公司动工</h3>
]]></content>
  </entry>
  <entry>
    <title>LaTeX中的几个基本概念</title>
    <url>/2024/03/12/%E7%AC%AC%E4%B8%80%E7%AB%A0LaTex%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h1 id="latex的基本概念"><a class="markdownIt-Anchor" href="#latex的基本概念"></a> LaTex的基本概念</h1>
<h2 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h2>
<ul>
<li>Donald E. Knuth 1982年发布Tex引擎，1989年位更好的支出8-bit字符和多语言排版而予以改进。</li>
<li>LaTex是一种使用Tex程序作为排版引擎的格式（format）。可以错略的理解为是对Tex的一层封装。起初有Leslie Lamport博士开发，目前又LaTex工作组进行维护。</li>
</ul>
<h2 id="latex命令和代码结构"><a class="markdownIt-Anchor" href="#latex命令和代码结构"></a> LaTex命令和代码结构</h2>
<p>命令两种形式：</p>
<ol>
<li><code>\</code>和后面的一串字母，如<code>\LaTex</code>。以任意非字母符号为界限。</li>
<li><code>\</code>反斜线和后面单个非字母符号，比如<code>\$</code>.</li>
</ol>
<p>注意⚠️</p>
<ol>
<li>字母形式的LaTex忽略其后的所有连续空格，如果要引入空格，应该写成<code>\LaTex&#123;&#125;</code>。</li>
<li>LaTex大小写敏感。</li>
</ol>
<p>【参数】一些命令可以接受参数，参数影响命令的效果。参数有：</p>
<ol>
<li>mandatory arguments，用<code>&#123;&#125;</code>包裹。</li>
<li>optional arguments，用<code>[]</code>包裹。</li>
<li><code>*</code>带一个星号和不带星号的命令效果有差异。可以把星号看作一种特殊的可选参数。</li>
</ol>
<p>【环境】环境成对出现，环境有时会携带参数，环境名保持一致。部分环境允许嵌套。比如</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\begin</span>&#123;enviroment name&#125;[optional arguments]&#123;mandatory arguments&#125;</span><br><span class="line">……</span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;enviroment name&#125; <span class="comment">% 这里不在需要写参数</span></span><br></pre></td></tr></table></figure>
<p>【分组】LaTex使用<code>&#123;&#125;</code>作为分组。分组中效果命令被限制在分组内。修改字体字号的命令即属此类。</p>
<hr />
<p>LaTex 源码结构：</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>&#123;&#125; <span class="comment">% 指定文档的文档类</span></span><br><span class="line"><span class="comment">%  导言区。一般会在这里调用宏包和对文档进行全局设置。</span></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"><span class="comment">% 正文内容</span></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h2 id="文档类和宏包"><a class="markdownIt-Anchor" href="#文档类和宏包"></a> 文档类和宏包</h2>
<p>文档类：</p>
<p>LaTex中的三个表中文档类：article, report, book. 在此基础上派生的一类文档如中文排版的ctexart, ctexrep, ctexbook.</p>
<p>可选参数：</p>
<p>为文档类指定选项，全局规定一些排版参数，如字号、纸张大小、单双面。</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\documentclass</span>[11pt,twoside,a4paper]&#123;article&#125;</span><br></pre></td></tr></table></figure>
<p>三个标准文档类的可指定选项包括：</p>
<ol>
<li>字号：10pt, 11pt, 12pt。默认10pt。</li>
<li>纸张大小：a4paper, letter paper, 等等。</li>
<li>单双面：twoside, oneside. 双面排版时，奇偶页的页眉页脚、页边距不同。article和report默认为单面。book默认为双面。</li>
<li>单栏双栏：onecolumn, twocolume. 默认是 onecolumn.</li>
<li>新一章在起始位置：<code>openright</code>, <code>openany</code>. 指定新一章是否必须从奇数页开始（右侧）。默认article无效；report为<code>openany</code>；book为<code>openright</code>。</li>
<li>横向排版还是纵向排版：landscape. 默认为纵向。</li>
<li>标题是否单独成页：titleapge, notitlepage. article默认为不单独成页。report和book默认为单独成页。</li>
<li>草稿/终稿：draft, final.草稿模式小，不良断行会在行尾条件一个黑色方块。默认为final.</li>
<li>行间公式左对齐： fleqn，行间公式左对齐。默认居中对齐。</li>
<li>公式编号放左边：leqno，公式编号放左边，默认放右边。</li>
</ol>
<hr />
<p>宏包：调用宏包的命令<code>usepackage[options]&#123;package name&#125;</code></p>
<p>可以一次调用多个宏包，中间用逗号隔开。此时一般不指定选项。</p>
<hr />
<h2 id="文件的组织方式"><a class="markdownIt-Anchor" href="#文件的组织方式"></a> 文件的组织方式</h2>
<p>将源文件分割成若干个文件，比如每章的目录放在单独的文件中，会大大缩短修改和校对时间。</p>
<p>LaTex中向源代码中插入文件的命令：</p>
<ol>
<li><code>\include&#123;filename&#125;</code>，filename不带扩展名。如果和要编译的主文件不在同一个目录，要加上相对或者绝对路径。通过include引入的文件，在读入后会另起一页。如果不要另起一页可以用input命令。</li>
<li><code>\input&#123;filename&#125;</code>。当导言区内容较多时，可以单独放置在一个<code>.tex</code>文档，在用<code>\input&#123;&#125;</code>插入。</li>
</ol>
<hr />
<h2 id="相关术语"><a class="markdownIt-Anchor" href="#相关术语"></a> 相关术语</h2>
<p>【引擎】又称为编译器，是编译源码并生成文档的程序。如pdftex, xetex等。</p>
<p>【格式】是定义了一组命令的代码集。LaTex是最广泛应用的一个格式。比如plain Tex格式，没有定义诸如<code>\documentclass</code>和<code>\section</code>等等命令。</p>
<p>【编译命令】是实际调用的、结合了引擎和格式的命令。xelatex命令是结合了xetex引擎和latex格式的一个编译命令。</p>
<blockquote>
<p>调用syntaxonly 可以只编译文档而不生成PDF文档，我们如果只是想检查错误可以使用</p>
<p><code>\usepackage&#123;syntaxonly&#125;</code></p>
<p><code>\syntaxonly</code></p>
</blockquote>
]]></content>
      <categories>
        <category>编程</category>
        <category>Latex</category>
      </categories>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>第二章 LaTeX中几个常用的基本语法</title>
    <url>/2024/04/04/%E7%AC%AC%E4%BA%8C%E7%AB%A0%20LaTeX%E4%B8%AD%E5%87%A0%E4%B8%AA%E5%B8%B8%E7%94%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<ul>
<li>
<p>latex中，多个空格视为一个空格，连个回车键视为分段，也可以使用<code>\par</code>命令分段。</p>
</li>
<li>
<p>连字：西文字体很多会出现连字现象，可以在字母间加上<code>&#123;&#125;</code>阻止这种情况</p>
</li>
</ul>
<p>it’s dif{ }f{ }cult to f{ }ind \ldots</p>
<ul>
<li>西文中使用<code>-</code>组成复合词，使用<code>--</code>连接数字，使用<code>---</code>连接单词。</li>
<li><code>\=a \'a \v a \</code>a`</li>
<li><code>\newline</code>只能在文本段落中断行. <code>\\</code>可以在任何格式中断行，而且带一个可选参数，指定向下增加的垂直间距，<code>\\\*</code>表示禁止在断行处分页。</li>
<li>在latex中输入latex命令使用<code>\verb|命令|</code>来表示</li>
<li>断页的命令为<code>\newpage</code>和<code>\clearpage</code>.两者的不同在于双栏排版中，<code>\newpage</code>为另起一栏的作用。</li>
<li>告诉latex哪里适合断行断页，哪里不允许断行断页，可以使用命令<code>\linebreak[]``\nolinebreak[]</code></li>
</ul>
<p><code>\pagebreak[]</code>和<code>nopagebreak[]</code>后边的参数填写1-4，表示适合或者不适合的程度。</p>
<ul>
<li>
<p>在西文排版实践中，断行的位置优先选取在两个单词之间，也就是在源代码中输入的“空格”。 文字在单词间的“空格”处断行时，“空格”生成的间距随之舍去。 <strong>可以使用字符~ 输入一个不会断行的空格</strong>比如<code>Donald~E</code>.</p>
</li>
<li>
<p>很长的英文单词，会考虑从单词中间自动换行，我们可以给latex参考建议，在哪里换行比较合适，命令为<code>\-</code></p>
</li>
<li>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\section</span>[目录中显示的标题]&#123;页眉中显示的标题&#125;</span><br></pre></td></tr></table></figure>
<p>在这个示例中，方括号内的文本是可选参数，用于指定在目录中显示的标题，而花括号内的文本是实际章节标题。这样可以使目录中显示的标题与页眉中显示的标题不同。</p>
</li>
<li>
<p>在需要进行引用的位置比如：章节标题、行间公式、有序列表、图表标题和定理环境中使用<code>\label</code>命令，在需要引用过的位置<code>\ref&#123;labelname&#125;~\pageref&#123;labelname&#125;</code>引用就可以了。</p>
</li>
<li>
<p>在需要插入脚注的地方写<code>\footnote&#123;脚注内容&#125;</code>就可以了。在各种盒子内，比如表格，可能不能生成正确的脚注，可以在插入脚注地方写<code>\footnotemark&#123;脚注内容&#125;</code>,然后在合适的位置用<code>\footnotetext</code>生成就可以了。</p>
</li>
<li>
<p><code>\marginpar[左边注]&#123;右边注&#125;</code>可以进行边注。不设置左边注，则奇偶页文字相同，设置了左边注，则偶数页就使用左边注。</p>
</li>
<li>
<p>列表环境有两个<code>\begin&#123;enumerate&#125;</code> and <code>\begin&#123;itemize&#125;</code>两个都用<code>\item</code>表明列表相，<code>\item[]</code>可选参数，可以自定义符号。</p>
</li>
<li>
<p>无需列表的符号可以由<code>\labelitemi</code> and <code>\labelitemv</code>定义<code>\labelitemi, labelitemii, labelitemiii, labelitemv</code>共四级列表。</p>
</li>
<li>
<p>有序列表的符号由<code>\labelenumi到\labelenumv</code>定义。</p>
</li>
<li>
<p>对齐由三个环境<code>center, flushleft, flushright</code></p>
</li>
<li>
<p><code>\verb| |</code>可以显示原始文本，而不受解释器的影响。分界线一般使用<code>|</code>但不是必须的，出了星号、空格和字母外的任何字符。</p>
</li>
<li>
<p>另外三个命令也可以实现对齐<code>\centering, \raggedleft, \raggedright</code>通常，对齐环境使用在文本中，而对齐命令使用在浮动体环境中。</p>
</li>
<li>
<p>引用环境较一般文字有额外的左右缩进。<code>quote</code>环境首行不缩进，<code>quotation</code>首行缩进。<code>verse</code>环境会使首行悬挂伸出。</p>
</li>
<li>
<p>代码环境使用<code>\verbatim</code>其中<code>\verbatim*</code>可以是代码中的空格显示为<code>ㄩ</code>更加直观。</p>
</li>
<li>
<p>简短的代码或者关键字可以用<code>\verb</code>命令。</p>
</li>
<li>
<p>另外更常见的写代码是使用<code>\lstlisting</code>命令，在导言区域加入<code>usepackage&#123;listings&#125;</code>宏包，并设置代码格式比如</p>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line"><span class="keyword">\lstset</span>&#123;</span><br><span class="line">    language=Python,</span><br><span class="line">    basicstyle=<span class="keyword">\ttfamily</span>,</span><br><span class="line">    keywordstyle=<span class="keyword">\color</span>&#123;blue&#125;,</span><br><span class="line">    commentstyle=<span class="keyword">\color</span>&#123;green&#125;,</span><br><span class="line">    numbers=left,</span><br><span class="line">    numberstyle=<span class="keyword">\tiny</span>,</span><br><span class="line">    numbersep=5pt,</span><br><span class="line">    breaklines=true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>表格列格式，arry宏包。</p>
</li>
<li>
<p>在LaTeX中，&gt;{}和&lt;{}这样的语法用于对表格中的列进行格式化。在这个例子中，&gt;{\itshape}表示对该列中的内容应用斜体格式，而&lt;{*}表示该列的内容采用默认的格式。</p>
<p>具体来说：</p>
<p>- &gt;{\itshape}将该列中的文本内容应用斜体格式。</p>
<p>- &lt;{*}表示该列的内容采用默认的格式。</p>
</li>
<li>
<p>插入图片使用<code>graphicx</code>宏包，然后在导言去插入命令指定位置<code>\graphicspath&#123;同文件下专门设立图片文件夹路径为img/</code>}。在插入地方输入命令<code>\includegraphics&#123;图片名称.后缀&#125;</code>注意图片名为英文。</p>
</li>
<li>
<p>如果在同目录中设立了两个多个子文件夹，可以使用<code>\graphicspath&#123;&#123;img/&#125;&#123;logo/&#125;&#125;</code>指定。同是这里可以使用绝对路径指定任意位置的文件夹，比如图片在桌面，可以使用<code>\graphicspath&#123;&#123;/Users/ken/Desktop/&#125;&#125;</code>表示。</p>
</li>
<li>
<p>\includegraphics可以带一个参数width, height, scale, angle.比如设定宽度为0.8倍该行文字宽，<code>\includegraphics[width=0.8\linewidth]&#123;ThisPic&#125;</code></p>
</li>
<li>
<p><code>\mbox</code>可以设定一个文本框，<code>makebox</code>等同但是可以带两个参数指定盒子的宽度和里边文本的对齐方式，比如<code>\makebox[10em][l/r/c/s]&#123;文本内容&#125;</code>其中s表示分散对齐。</p>
</li>
<li>
<p><code>\fbox and \framebox</code>会为文本框加上边框，可以使用<code>\setlength</code>设定边框的宽度，比如<code>\setlength&#123;fboxrule&#125;&#123;1pt&#125;</code>和<code>\setlength&#123;\fboxsep&#125;&#123;1em&#125;</code></p>
</li>
<li>
<p>以上两种文本款内的文本不能换行，如果要换行使用另一种盒子，<code>\parbox</code>这种盒子跟<code>\makebox</code>不同，<code>\parbox[和周围环境的对齐方式tbc][高度][文本对齐方式tbcs]&#123;盒子宽度&#125;&#123;文本&#125;</code></p>
</li>
<li>
<p><code>\parbox</code>内部只能使用<code>footnotemark</code>+<code>footnotetext&#123;&#125;</code>命令</p>
</li>
<li>
<p><code>\minipage</code>环境与<code>\parbox</code>命令作用一样，可以使用<code>\footnote</code>脚注,但是是单独成块。</p>
</li>
<li>
<p><code>\rule</code>命令可以用来画一个实心矩形<code>\rule[上浮或下浮]&#123;width&#125;&#123;height&#125;</code>.还可以用它来画线</p>
<p><code>\rule[-.4pt]&#123;3em&#125;&#123;.4pt&#125;</code></p>
</li>
<li>
<p>浮动体有两种table and figure.两者设置同理，参数为h(当前位置)t顶部b底部p单独成页！在决定位置时忽视限制。</p>
</li>
<li>
<p>双栏排版时，浮动题命令为\table*和\figure*。但是参数只能有tb两个位置。</p>
</li>
<li>
<p>在浮动环境中加上<code>\caption[目录中的标题]&#123;标题&#125;</code>生成图表标题并自动编号，如果不要编号，同<code>\section*</code>生成不带编号的浮动体。紧跟<code>\caption</code>命令后，可以<code>\label&#123;&#125;</code>方便引用。</p>
</li>
<li>
<p>使<code>\renewcommand&#123;\figurename&#125;&#123;标题&#125;</code>更改默认的标题前缀。</p>
</li>
<li>
<p>使用<code>\listoftables</code>生成类似目录页的单独的浮动体目录。</p>
</li>
<li>
<p>行内公式使用<code>$ $</code>包裹，行间公式使用equation环境，不带编号的行间公式使用<code>equation*</code>包裹。</p>
</li>
<li>
<p>使用<code>\label&#123;&#125;</code>和<code>\eqref&#123;&#125;</code>引用公式</p>
</li>
<li>
<p><code>\tag&#123;&#125;</code>命令修改编号，<code>\notag</code>命令取消编号</p>
</li>
<li>
<p>公式环境中需要空格使用<code>\quad and \qquad</code></p>
</li>
<li>
<p>公式中使用文本需要引入<code>\text&#123;&#125;</code>命令。</p>
</li>
<li>
<p>省略号使用<code>\ldots</code> <code>\vdots</code> <code>\ddots</code></p>
</li>
<li>
<p>上标使用<code>^</code>下标使用<code>_</code>上下标中的子公式使用<code>&#123;&#125;</code>包围。</p>
</li>
<li>
<p>分数使用<code>\frac&#123;分子&#125;&#123;分母&#125;</code>行内公式使用<code>\tfrac&#123;&#125;&#123;&#125;</code>.</p>
</li>
<li>
<p>根式使用<code>\sqrt[次]&#123;根数&#125;</code>。</p>
</li>
<li>
<p><code>\ne, \ge, \le, \approx, \sim, \equiv, \propto</code></p>
</li>
<li>
<p><code>\times, \div, \cdot, \pm, \mp</code></p>
</li>
<li>
<p><code>\dot&#123;&#125;</code> <code>\ddot&#123;&#125;</code> <code>\vec&#123;&#125;</code> <code>\hat&#123;&#125;</code> <code>\overline&#123;&#125;</code> <code>\underline&#123;&#125;</code> <code>\overrightarrow&#123;&#125;</code></p>
</li>
<li>
<p><code>\overbrace&#123;&#125; and \underbrace&#123;&#125;</code>生成上下大括号，可以带一个上下标公式。</p>
</li>
<li>
<p><code>\xleftarrow&#123;&#125; and \xrightarrow&#123;&#125;</code>可以伸缩的箭头，并且可以增加上下标。</p>
</li>
<li>
<p>字体加粗<code>\textbf&#123;&#125;</code>。数学公式中使用<code>\mathbf&#123;&#125;</code>.</p>
</li>
<li>
<p>字体命令<code>\textrm&#123;&#125;</code>, <code>\textsf&#123;&#125;</code>,<code>\textit&#123;&#125;</code>,<code>\textsl&#123;&#125;</code>, <code>textup&#123;&#125;</code>, <code>\texttt&#123;&#125;</code>, <code>\emph&#123;&#125;</code></p>
</li>
<li>
<p>字号命令, <code>&#123;\tiny&#125;</code>, <code>&#123;\scriptsize&#125;</code>, <code>&#123;\footnotesize&#125;</code>, <code>&#123;\samll&#125;</code>, <code>&#123;\normalsize&#125;</code>,<code>&#123;\large&#125;</code>, <code>&#123;\Large&#125;</code>,<code>&#123;\LARGE&#125;</code>,<code>&#123;\huge&#125;</code></p>
</li>
<li>
<p>另外精确指定字号大小的命令是<code>&#123;\footsize&#123;字号&#125;&#123;行距&#125;\selectfont 文本&#125;</code>。放在导言区，可以不用<code>\selectfont</code></p>
</li>
<li>
<p>xelatex支持调用调用fontspec宏包，可以在导言区设置全局字体：<code>\setmainfont&#123;font name&#125;&#123;font features&#125;</code>; <code>\setsansfont&#123;&#125;&#123;&#125;</code>;<code>\setmonofont&#123;&#125;&#123;&#125;</code></p>
</li>
<li>
<p>ctex<code>宏包中中文字体使用\setCJKmainfont&#123;&#125;&#123;&#125;</code>。ctex自动调用fontspec宏包</p>
</li>
<li>
<p>使用fontspec宏包会覆盖数学字体。需要数学字体时使用，在fontspec宏包中指定no-math. 或者在\documentclass命令里指定no-math.</p>
</li>
<li>
<p><code>\underline&#123;&#125;</code>生成下划线.调用ulem宏包，启用 <code>\uline</code>生成下划线。</p>
</li>
<li>
<p>长度变量可以被赋值使用 <code>\setlength&#123;\length command&#125;&#123;length&#125;</code>进行赋值。</p>
</li>
<li>
<p>设置行距我们一般不用 <code>\fontsize</code>, 更多使用 <code>\linespread&#123;&#125;</code>,基础行距时字号的1.2倍。如果设置成 <code>\linespread&#123;1.5&#125;</code>那就是说行距设置成了1.8倍字号大小。</p>
</li>
<li>
<p>如果不是在导言区， 可以跟上 <code>\selectfont</code>来改变后边文本的行距。</p>
</li>
<li>
<p>行距设置是在分段时才生效的，字号是立即生效的，段落缩进分段时生效的。</p>
</li>
<li>
<p>段落首行缩进使用 <code>\setlength&#123;\parindent&#125;&#123;length&#125;</code>. 段落间距使用 <code>\setlength&#123;\parskip&#125;&#123;length&#125;</code></p>
</li>
<li>
<p><code>\hspace&#123;&#125;</code>在单词后边生成一段空白，但是会随着断行而被舍弃，<code>\hspace*&#123;&#125;</code>水平间距不随断行舍弃。参数里边可以写 <code>\stretch&#123;n&#125;</code>里边的n为权重，同一行出现多个 <code>\stretch&#123;&#125;</code>时n就有作用了, 参数填写\fill相当于 <code>\stretch&#123;1&#125;</code></p>
</li>
<li>
<p>增加垂直间距使用 <code>\vspace</code>他的用法和 <code>\hspace</code> 相同。</p>
</li>
<li>
<p>另外可以使用 <code>\bigskip, \medskip, smallskip</code>紧跟在 <code>\par</code>之后用来增加段落间距。</p>
</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>Latex</category>
      </categories>
      <tags>
        <tag>LaTeX</tag>
      </tags>
  </entry>
  <entry>
    <title>类型检查</title>
    <url>/2024/03/31/%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5/</url>
    <content><![CDATA[<h1 id="数据类型有"><a class="markdownIt-Anchor" href="#数据类型有"></a> 数据类型有</h1>
<ul>
<li>数值
<ul>
<li>整数</li>
<li>布尔值</li>
<li>浮点数</li>
<li>复数</li>
</ul>
</li>
<li>字符串</li>
<li>空值</li>
</ul>
<h1 id="我们通过type函数来检查值的类型-但是注意-该函数会讲返回的结果作为返回值返回-可以通过变量来接受返回值"><a class="markdownIt-Anchor" href="#我们通过type函数来检查值的类型-但是注意-该函数会讲返回的结果作为返回值返回-可以通过变量来接受返回值"></a> 我们通过<code>type()</code>函数来检查值的类型, 但是注意, 该函数会讲返回的结果作为返回值返回, 可以通过变量来接受返回值.</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;你好&#x27;</span></span><br><span class="line">b = <span class="built_in">type</span>(a)</span><br><span class="line"><span class="comment"># 或者print(type(a))</span></span><br><span class="line"><span class="comment"># 或者print(type(&#x27;你好&#x27;))</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>
<p>返回值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;class &#x27;str&#x27;&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>编译型语言和解释型语言</title>
    <url>/2024/03/31/%E7%BC%96%E8%AF%91%E5%9E%8B%E8%AF%AD%E8%A8%80%E5%92%8C%E8%A7%A3%E9%87%8A%E5%9E%8B%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<p>任何语言在交给计算机执行时，必须转换为机器码。根据转换时机的不同，语言分为两大类：</p>
<ul>
<li>编译型语言：会在代码执行前将代码编译为机器码，然后交给计算机执行。执行速度快，跨平台型差。</li>
<li>解释性语言：不会在执行前对代码进行编译，而是在执行的同时一边执行一边编译。跨平台型好。执行速度慢。</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机简介</title>
    <url>/2024/03/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>计算机是一个用来进行计算的<strong>机器</strong>，跟生活中其他机器不同的点在于计算机是用来<strong>计算</strong>的。</p>
<p>目前计算机只能根据人类的指令进行操作。我们所学计算机，就是学习如何去进行控制这台机器。</p>
<p>计算机包含硬件和软件两部分：</p>
<ul>
<li>
<p>硬件：看得见摸得着的鼠标键盘、主板、内存、硬盘。它相当于人的身体器官。</p>
</li>
<li>
<p>软件：看的见摸不着的。软件包含：</p>
<ul>
<li>系统软件：Windows，Linux，macOS等。</li>
<li>应用软件：Office，QQ，王者荣耀等。</li>
</ul>
<p>负责计算机的运行。人器官完好也有可能是个死人。</p>
</li>
</ul>
<p>我们需要通过<strong>软件</strong>操作计算机。但是软件中不是所有的功能都会对用户开放，用户需要调取软件的接口/交互界面（interface）来操作计算机。有允许用户调取的接口（用户界面），有不允许用户调取的接口。</p>
<p>用户界面包括：TUI（文本交互界面）比如Mac的Terminal，GUI（图形交互界面）正常操作的界面。</p>
<p>我们学习编程就要学习通过TUI操作软件进行控制计算机。</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>计算机简介</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机语言</title>
    <url>/2024/03/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p>计算机语言其实和人类语言没有本质区别，知识交流主体不同。</p>
<p>机器语言发展的三个阶段：</p>
<ul>
<li>机器语言：通过二进制编码来编写程序。编写麻烦，执行效率好。</li>
<li>汇编语言：使用符号代替机器码。汇编与反汇编。汇编语言只适用于某些硬件，兼容性差。计算机底层一些硬件驱动现在还用汇编语言编写。</li>
<li>高级语言：和英语语法类似，并且和硬件关系不紧密，通过高级语言编写的程序可以在不同的硬件系统中执行。</li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>运算符(操作符)</title>
    <url>/2024/03/31/%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h1 id="算数运算符"><a class="markdownIt-Anchor" href="#算数运算符"></a> 算数运算符</h1>
<p><code>+</code>可以计算和拼串<br />
<code>-</code>计算<br />
<code>*</code>可以计算和复制字符串<br />
<code>/</code>计算结果总是浮点型<br />
<code>//</code>相除后只会保留整数位, 取整. 注意, 如果被除数是浮点符, 那么仍会返回浮点数.<br />
<code>**</code>幂运算<br />
<code>** 0.5</code> 开方运算<br />
<code>%</code> 相除取余数</p>
<h1 id="赋值运算符"><a class="markdownIt-Anchor" href="#赋值运算符"></a> 赋值运算符</h1>
<p>将右边的值赋给左边的变量.<br />
<code>=</code><br />
<code>+=</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">a += <span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>
<p>返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = 15</span><br></pre></td></tr></table></figure>
<p><code>-=</code><br />
<code>*=</code><br />
<code>/=</code><br />
<code>//=</code><br />
<code>**=</code><br />
<code>%=</code></p>
<h1 id="关系运算符"><a class="markdownIt-Anchor" href="#关系运算符"></a> 关系运算符</h1>
<p>关系运算符用来比较两个值之间的关系, 只会返回bool值<br />
<code>&gt;</code><br />
<code>&gt;=</code><br />
<code>&lt;</code><br />
<code>&lt;=</code><br />
<code>==</code>比较两个值是否相等(注意这里跟上边赋值运算符中<code>=</code>的区别)<br />
<code>!=</code>两个值是否不想等<br />
两个字符串可以比较大小, 它实际比的是Unicode编码. 但是字符串不能跟数值进行比较大小.<br />
<code>True</code>和<code>1</code>是两个不同的对象, 但是它们的值是相同的. 判断两个对象是否是同一个对象用<code>is</code>和<code>is not</code>, 它们两个比较的是对象的id.<br />
只有id相同的对象才是同一个对象.</p>
<h1 id="逻辑运算符"><a class="markdownIt-Anchor" href="#逻辑运算符"></a> 逻辑运算符</h1>
<ul>
<li><code>not</code>逻辑非<br />
对符号右侧的值进行<code>非</code>运算. 对bool进行取反操作, 对非bool值先转换成bool值再取反.</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="literal">True</span></span><br><span class="line">a = <span class="keyword">not</span> a</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>
<p>返回Flase</p>
<ul>
<li>
<p><code>and</code>逻辑与</p>
<ul>
<li>对符号两侧的进行与运算.</li>
<li>符号两侧的值都为True时,才返回True. 否则返回False.</li>
<li>只有多个条件同时满足, 才执行某个语句时候, 我们用逻辑与.</li>
<li>Python中的与是短路的与, 它是在语句中找Flase, 如果第一个值为False, 那么后边的它就不看了, 直接返回Flase.<br />
比如这里  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">True</span> <span class="keyword">and</span> <span class="built_in">print</span>(<span class="string">&quot;你猜我出来吗&quot;</span>)</span><br></pre></td></tr></table></figure>
此时返回<code>你猜我出来吗</code>. 因为第一个值为True, 所以print()会执行.  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">False</span> <span class="keyword">and</span> <span class="built_in">print</span>(<span class="string">&quot;你猜我出来吗&quot;</span>)</span><br></pre></td></tr></table></figure>
此时返回<code> </code>什么结果也不会返回</li>
</ul>
</li>
<li>
<p><code>or</code>逻辑或<br />
两端只要有一个True就会返回True<br />
同理这里的or是在找True. 找到True以后, 不在执行后边的语句, 没有找到, 就继续执行后边的语句.</p>
</li>
</ul>
<div class="tip warning"><p>当我们对非布尔值进行与或运算时, Python会将它当作布尔值进行运算, 并返回原值.</p>
</div>
<p>比如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = <span class="number">1</span> <span class="keyword">and</span> <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>
<p>此时, 会返回2, 首先可以确定它返回原值, 第二与运算是找false, 第一个1肯定是True, 它会继续走到第2步, 第2个值不管是True还是False都会将其返回.<br />
同理or运算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">result = <span class="number">1</span> <span class="keyword">or</span> <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>
<p>此时, 肯定返回1, 因为or运算是找True的.</p>
<h1 id="条件运算符又叫三元运算符"><a class="markdownIt-Anchor" href="#条件运算符又叫三元运算符"></a> 条件运算符(又叫三元运算符)</h1>
<p>语法: 语句1 if 条件表达式 else 语句2<br />
执行流程:</p>
<ol>
<li>首先执行条件表达式, 进行求值判断</li>
<li>如果为True, 执行语句1</li>
<li>如果为False, 执行语句2</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;你好&quot;</span>) <span class="keyword">if</span> <span class="literal">False</span> <span class="keyword">else</span> <span class="built_in">print</span>(<span class="string">&quot;Hello&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>返回Hello</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>进制</title>
    <url>/2024/03/31/%E8%BF%9B%E5%88%B6/</url>
    <content><![CDATA[<ul>
<li>十进制
<ul>
<li>满十进一。十进制中有10个数字0 1 2 3 4 5 6 7 8 9. 10是由连个数字构成的，不属于10进制中的数字。</li>
</ul>
</li>
<li>二进制
<ul>
<li>满二进一</li>
<li>二进制中只有2个数字0 1</li>
<li>二进制如何数数 0 1 10  11 100 101 110 111 1000 1001 1010 1011 1100</li>
</ul>
</li>
<li>八进制
<ul>
<li>满八进一</li>
<li>一共有8个数字0 1 2 3 4 5 6 7</li>
<li>八进制如何数数0 1 2 3 4 5 6 7 10 11 12 13 14 15 16 17 20</li>
</ul>
</li>
<li>十六进制（查看二进制数据时，一般会以十六进制的形式显示）
<ul>
<li>满十六进一</li>
<li>十六进制有16个数字 0 1 2 3 4 5 6 7 8 9 a b c d e f</li>
<li>十六进制如何数数0 1 2 3 4 5 6 7 8 9  a b c d e 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20 21</li>
</ul>
</li>
</ul>
<hr />
<p>内存相当于一个个小格子，1个小格子存储一个0或者1 。内存中的一个小格子我们叫做bit（位），bit是计算机中的最小单位。</p>
<p>8bit = 1byte。byte是我们最小的可操作单位。</p>
<p>1024byte = 1kb（千字节）</p>
<p>1024kb = 1mb（兆字节）</p>
<p>1024mb = 1gb（吉字节）</p>
<p>1204gb = 1tb（太字节）</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>集合</title>
    <url>/2024/04/06/%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<ul>
<li>sets can be builded by <code>&#123;&#125;</code>or <code>set() function</code></li>
<li>sets only accepts immutable objects, list for example is not acceptable.</li>
<li>objects in sets is disorder.</li>
<li>every object in sets must be unique</li>
<li><code>set()</code>can change a sequence or dict into a sets. it only accepts the <code>key</code> if you want<br />
change dict.</li>
<li>you can not mnipulate sets by index, but you can change it into list firstly</li>
<li>add() method and add factor to sets.</li>
<li>update() method, insert a sets into the current sets. it doesn’t have to be sets, sequence and<br />
dict can also insert to sets in this way.</li>
<li>pop() method will remove factor randomly and return the deleted factor</li>
<li>remove(factor). remove the factor you put in argument place.</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>高阶函数</title>
    <url>/2024/04/11/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="高阶函数"><a class="markdownIt-Anchor" href="#高阶函数"></a> 高阶函数</h1>
<p>定义：接受函数作为参数，并且将函数作为返回值返回。<br />
例子: 定义一个函数，可以将指定列表中所有的偶数返回。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fn</span>(<span class="params">lst</span>):</span><br><span class="line">    new_lst = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> lst:</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            new_lst.append(i)</span><br><span class="line">    <span class="keyword">return</span> new_lst</span><br><span class="line"><span class="built_in">print</span>(fn(lst))</span><br></pre></td></tr></table></figure>
<p>这只是一个普通的函数，只能返回列表中的偶数，如果我们要让这一个函数，既能返回奇数又能返回偶数，而且可以返回大于5的数呢？</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fn1</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fn2</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fn3</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fn</span>(<span class="params">a</span>):</span><br><span class="line">    new_lst = []</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> lst:</span><br><span class="line">        <span class="keyword">if</span> a:</span><br><span class="line">            new_lst.append(n)</span><br><span class="line">    <span class="keyword">return</span> new_lst</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fn(fn1))</span><br></pre></td></tr></table></figure>
<p>这里，我们可以将任意已经定义的函数作为参数，从而求出不同的值。这里我们传递不同的函数，就是传递不同的代码。</p>
<h1 id="filter函数"><a class="markdownIt-Anchor" href="#filter函数"></a> filter()函数</h1>
<p>它可以从序列中过滤出符合条件的元素，保存到一个新的序列中。<br />
需要两个参数：</p>
<ol>
<li>函数，根据该函数进行过滤。</li>
<li>需要过滤的序列名。<br />
但是它的返回值是一个可迭代的结构，是无法直接打印的。可以把它转换成列表进行打印输出。</li>
</ol>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fn1</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fn2</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fn3</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fn</span>(<span class="params">a</span>):</span><br><span class="line">    new_lst = []                                                                </span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> lst:</span><br><span class="line">        <span class="keyword">if</span> a:</span><br><span class="line">            new_lst.append(n)</span><br><span class="line">    <span class="keyword">return</span> new_lst</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fn(fn1))</span><br></pre></td></tr></table></figure>
<h1 id="lamda函数"><a class="markdownIt-Anchor" href="#lamda函数"></a> lamda函数</h1>
<p>专门用来创建一些简单的函数，它是函数创建的另一种方式。<br />
它的结构为<code>lamda</code>+<code>arguments</code>+<code>:</code>+<code>return</code></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fn5</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure>
<p>等价于：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">lamda a,b : a + b</span><br></pre></td></tr></table></figure>
<p>同样可以，把它赋值给一个变量</p>
<h1 id="map函数"><a class="markdownIt-Anchor" href="#map函数"></a> map()函数</h1>
<p>对可迭代的对象中的元素进行制定操作，然后添加到一个新的对象中返回</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">lst = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>]</span><br><span class="line"><span class="keyword">lambda</span> i : i + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> i : i + <span class="number">1</span>,lst)))</span><br></pre></td></tr></table></figure>
<p>匿名函数一般是作为参数使用，其他地方一般不会使用。</p>
]]></content>
      <categories>
        <category>编程</category>
        <category>python</category>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>关于</title>
    <url>/about/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>文档</title>
    <url>/files/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>分类</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/css/postpage_style.css</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/css/header_style.css</url>
    <content><![CDATA[/* 导航栏做居中处理 */
#nav-right{
    flex:1 1 auto;
    justify-content: flex-end;
    margin-left: auto;
    display: flex;
    flex-wrap: nowrap;
}

/* 去除导航栏选项中底下的蓝条 */
#nav *::after{
    background-color: transparent!important;
}

/* 导航栏菜单鼠标移入字体放大 */
#nav #site-name:hover, 
#nav .menus_item:hover, 
#nav #search-button:hover{
    font-size:28px;
}

.nav-fixed #nav{
    transform: translateY(58px)!important;
    -webkit-transform: translateY(58px)!important;
    -moz-transform: translateY(58px)!important;
    -ms-transform: translateY(58px)!important;
    -o-transform: translateY(58px)!important;
}
#nav{
    transition: none!important;
    -webkit-transition: none!important;
    -moz-transition: none!important;
    -ms-transition: none!important;
    -o-transition: none!important;
}
/* 2024-3-31 增加文章页现实宽度*/
.layout{
  max-width:1400px;
}
@media screen and (min-width: 900px) {
    html.hide-aside .layout>div:first-child {
        width: 80%
    }
}]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/js/script.js</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>链接</title>
    <url>/link/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>电影</title>
    <url>/movies/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>音乐</title>
    <url>/music/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>标签</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
